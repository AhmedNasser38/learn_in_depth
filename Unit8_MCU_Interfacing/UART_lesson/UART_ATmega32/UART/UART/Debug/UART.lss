
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000003b8  0000044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  00000454  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fdf  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e6  00000000  00000000  000015bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000090f  00000000  00000000  00001ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  000027b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000593  00000000  00000000  00002a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000762  00000000  00000000  0000301f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00003781  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 23 01 	call	0x246	; 0x246 <main>
  8a:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Kick>:
	if((LCD_PORT<< PIN7) == 0)
	{
	LCD_PORT_DDR |= (0xFF << Data_shift);
	LCD_CTRL_PORT &= ~(1<<RW);
	}else{
		LCD_Isbusy();
  92:	88 b3       	in	r24, 0x18	; 24
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	88 bb       	out	0x18, r24	; 24
  98:	00 00       	nop
  9a:	00 00       	nop
  9c:	82 e8       	ldi	r24, 0x82	; 130
  9e:	96 e0       	ldi	r25, 0x06	; 6
  a0:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
  a4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
  a8:	06 c0       	rjmp	.+12     	; 0xb6 <LCD_Kick+0x24>
  aa:	00 00       	nop
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
  b2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
  b6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
  ba:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_end+0x1>
  be:	00 97       	sbiw	r24, 0x00	; 0
  c0:	a1 f7       	brne	.-24     	; 0xaa <LCD_Kick+0x18>
  c2:	88 b3       	in	r24, 0x18	; 24
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	08 95       	ret

000000ca <LCD_CMD>:
	LCD_CMD(LCD_DISP_ON_CURSOR_BLINK);

}


void LCD_CMD(unsigned char cmd){
  ca:	cf 93       	push	r28
  cc:	c8 2f       	mov	r28, r24
	#endif
	#ifdef FOUR_BIT_MODE
	//LCD_Isbusy();


	LCD_PORT = (LCD_PORT & 0x0F) |(cmd & 0xF0);
  ce:	8b b3       	in	r24, 0x1b	; 27
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	9c 2f       	mov	r25, r28
  d4:	90 7f       	andi	r25, 0xF0	; 240
  d6:	89 2b       	or	r24, r25
  d8:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL_PORT &= ~(1<<RW | 1<<RS);
  da:	88 b3       	in	r24, 0x18	; 24
  dc:	89 7f       	andi	r24, 0xF9	; 249
  de:	88 bb       	out	0x18, r24	; 24
	LCD_Kick();
  e0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>

	LCD_PORT = (LCD_PORT & 0x0F) |(cmd << Data_shift);
  e4:	2b b3       	in	r18, 0x1b	; 27
  e6:	30 e1       	ldi	r19, 0x10	; 16
  e8:	c3 9f       	mul	r28, r19
  ea:	c0 01       	movw	r24, r0
  ec:	11 24       	eor	r1, r1
  ee:	92 2f       	mov	r25, r18
  f0:	9f 70       	andi	r25, 0x0F	; 15
  f2:	89 2b       	or	r24, r25
  f4:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL_PORT &= ~(1<<RW | 1<<RS);
  f6:	88 b3       	in	r24, 0x18	; 24
  f8:	89 7f       	andi	r24, 0xF9	; 249
  fa:	88 bb       	out	0x18, r24	; 24
	LCD_Kick();
  fc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>
	#endif

}
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <LCD_Send_char>:

void LCD_Send_char(uint8 ch){
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
		LCD_Kick();
	#endif
	#ifdef FOUR_BIT_MODE
	//	LCD_Isbusy();

		LCD_PORT = (LCD_PORT & 0x0F) |(ch & 0xF0);
 108:	8b b3       	in	r24, 0x1b	; 27
 10a:	8f 70       	andi	r24, 0x0F	; 15
 10c:	9c 2f       	mov	r25, r28
 10e:	90 7f       	andi	r25, 0xF0	; 240
 110:	89 2b       	or	r24, r25
 112:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL_PORT |= (1<<RS);
 114:	88 b3       	in	r24, 0x18	; 24
 116:	82 60       	ori	r24, 0x02	; 2
 118:	88 bb       	out	0x18, r24	; 24
		LCD_CTRL_PORT &= ~(1<<RW);
 11a:	88 b3       	in	r24, 0x18	; 24
 11c:	8b 7f       	andi	r24, 0xFB	; 251
 11e:	88 bb       	out	0x18, r24	; 24
		LCD_Kick();
 120:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>

		LCD_PORT = (LCD_PORT & 0x0F) |(ch << Data_shift);
 124:	2b b3       	in	r18, 0x1b	; 27
 126:	30 e1       	ldi	r19, 0x10	; 16
 128:	c3 9f       	mul	r28, r19
 12a:	c0 01       	movw	r24, r0
 12c:	11 24       	eor	r1, r1
 12e:	92 2f       	mov	r25, r18
 130:	9f 70       	andi	r25, 0x0F	; 15
 132:	89 2b       	or	r24, r25
 134:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL_PORT |= (1<<RS);
 136:	88 b3       	in	r24, 0x18	; 24
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	88 bb       	out	0x18, r24	; 24
		LCD_CTRL_PORT &= ~(1<<RW );
 13c:	88 b3       	in	r24, 0x18	; 24
 13e:	8b 7f       	andi	r24, 0xFB	; 251
 140:	88 bb       	out	0x18, r24	; 24
		LCD_Kick();
 142:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Kick>
	#endif

}
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <LCD_Clear_Screen>:
		}
	}

}
void LCD_Clear_Screen(void){
	LCD_CMD(LCD_CLEAR_SCREEN);
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 65 00 	call	0xca	; 0xca <LCD_CMD>
 150:	08 95       	ret

00000152 <LCD_Init>:
		LCD_Isbusy();
	}
}

void LCD_Init(){
	Delay_ms(20);
 152:	8a e9       	ldi	r24, 0x9A	; 154
 154:	92 e0       	ldi	r25, 0x02	; 2
 156:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
 15a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 15e:	06 c0       	rjmp	.+12     	; 0x16c <LCD_Init+0x1a>
 160:	00 00       	nop
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
 168:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 16c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 170:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_end+0x1>
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	a1 f7       	brne	.-24     	; 0x160 <LCD_Init+0xe>
	LCD_CTRL_DDR |= (1<<EN | 1<<RW | 1<<RS );
 178:	87 b3       	in	r24, 0x17	; 23
 17a:	8e 60       	ori	r24, 0x0E	; 14
 17c:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL_PORT &= ~(1<<EN | 1<<RW | 1<<RS );
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	81 7f       	andi	r24, 0xF1	; 241
 182:	88 bb       	out	0x18, r24	; 24

	LCD_PORT_DDR |= (0xFF << Data_shift) ; // need to take alook fo 4bitmode
 184:	8a b3       	in	r24, 0x1a	; 26
 186:	80 6f       	ori	r24, 0xF0	; 240
 188:	8a bb       	out	0x1a, r24	; 26
	Delay_ms(15);
 18a:	84 ef       	ldi	r24, 0xF4	; 244
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
 192:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 196:	06 c0       	rjmp	.+12     	; 0x1a4 <LCD_Init+0x52>
 198:	00 00       	nop
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
 1a0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 1a4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 1a8:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_end+0x1>
 1ac:	00 97       	sbiw	r24, 0x00	; 0
 1ae:	a1 f7       	brne	.-24     	; 0x198 <LCD_Init+0x46>

	LCD_Clear_Screen();
 1b0:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_Clear_Screen>
	#ifdef EIGHT_BIT_MODE
	LCD_CMD(LCD_FUNCTION_8BIT_2LINES); // need more generalized
	#endif
	#ifdef FOUR_BIT_MODE

	LCD_CMD(LCD_RETURN_HOME);
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	0e 94 65 00 	call	0xca	; 0xca <LCD_CMD>
	LCD_CMD(LCD_FUNCTION_4BIT_2LINES); // need more generalized
 1ba:	88 e2       	ldi	r24, 0x28	; 40
 1bc:	0e 94 65 00 	call	0xca	; 0xca <LCD_CMD>
	#endif
	LCD_CMD(LCD_ENTRY_MODE);
 1c0:	86 e0       	ldi	r24, 0x06	; 6
 1c2:	0e 94 65 00 	call	0xca	; 0xca <LCD_CMD>
	LCD_CMD(LCD_BEGIN_AT_FIRST_ROW);
 1c6:	80 e8       	ldi	r24, 0x80	; 128
 1c8:	0e 94 65 00 	call	0xca	; 0xca <LCD_CMD>
	LCD_CMD(LCD_DISP_ON_CURSOR_BLINK);
 1cc:	8f e0       	ldi	r24, 0x0F	; 15
 1ce:	0e 94 65 00 	call	0xca	; 0xca <LCD_CMD>
 1d2:	08 95       	ret

000001d4 <LCD_GotoXY>:
}
void LCD_Clear_Screen(void){
	LCD_CMD(LCD_CLEAR_SCREEN);
}
void LCD_GotoXY(unsigned char pos , unsigned char line){
	if (line == LCD_FIRST_LINE)
 1d4:	61 11       	cpse	r22, r1
 1d6:	06 c0       	rjmp	.+12     	; 0x1e4 <LCD_GotoXY+0x10>
	{
		if(pos < 16 && pos >=0)
 1d8:	80 31       	cpi	r24, 0x10	; 16
 1da:	58 f4       	brcc	.+22     	; 0x1f2 <LCD_GotoXY+0x1e>
			LCD_CMD(LCD_BEGIN_AT_FIRST_ROW + pos);
 1dc:	80 58       	subi	r24, 0x80	; 128
 1de:	0e 94 65 00 	call	0xca	; 0xca <LCD_CMD>
 1e2:	08 95       	ret
	}
	else if (line == LCD_SECOND_LINE)
 1e4:	61 30       	cpi	r22, 0x01	; 1
 1e6:	29 f4       	brne	.+10     	; 0x1f2 <LCD_GotoXY+0x1e>
	{
		if(pos < 16 && pos >=0)
 1e8:	80 31       	cpi	r24, 0x10	; 16
 1ea:	18 f4       	brcc	.+6      	; 0x1f2 <LCD_GotoXY+0x1e>
			LCD_CMD(LCD_BEGIN_AT_SECOND_ROW + pos);
 1ec:	80 54       	subi	r24, 0x40	; 64
 1ee:	0e 94 65 00 	call	0xca	; 0xca <LCD_CMD>
 1f2:	08 95       	ret

000001f4 <LCD_Send_str>:
		LCD_CTRL_PORT &= ~(1<<RW );
		LCD_Kick();
	#endif

}
void LCD_Send_str(uint8* str){
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	8c 01       	movw	r16, r24
	int count=0;
 1fe:	c0 e0       	ldi	r28, 0x00	; 0
 200:	d0 e0       	ldi	r29, 0x00	; 0
	while (*str > 0)
 202:	18 c0       	rjmp	.+48     	; 0x234 <LCD_Send_str+0x40>
	{

		LCD_Send_char(*str++);
 204:	0f 5f       	subi	r16, 0xFF	; 255
 206:	1f 4f       	sbci	r17, 0xFF	; 255
 208:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Send_char>
		count++;
 20c:	21 96       	adiw	r28, 0x01	; 1
		if(count == 16)
 20e:	c0 31       	cpi	r28, 0x10	; 16
 210:	d1 05       	cpc	r29, r1
 212:	29 f4       	brne	.+10     	; 0x21e <LCD_Send_str+0x2a>
		{
			LCD_GotoXY(0,LCD_SECOND_LINE);
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_GotoXY>
 21c:	0b c0       	rjmp	.+22     	; 0x234 <LCD_Send_str+0x40>
		}
		else if (count >= 32 )
 21e:	c0 32       	cpi	r28, 0x20	; 32
 220:	d1 05       	cpc	r29, r1
 222:	44 f0       	brlt	.+16     	; 0x234 <LCD_Send_str+0x40>
		{
			LCD_Clear_Screen();
 224:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_Clear_Screen>
			LCD_GotoXY(0,LCD_FIRST_LINE);
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_GotoXY>
			count = 0;
 230:	c0 e0       	ldi	r28, 0x00	; 0
 232:	d0 e0       	ldi	r29, 0x00	; 0
	#endif

}
void LCD_Send_str(uint8* str){
	int count=0;
	while (*str > 0)
 234:	f8 01       	movw	r30, r16
 236:	80 81       	ld	r24, Z
 238:	81 11       	cpse	r24, r1
 23a:	e4 cf       	rjmp	.-56     	; 0x204 <LCD_Send_str+0x10>
			LCD_GotoXY(0,LCD_FIRST_LINE);
			count = 0;
		}
	}

}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	08 95       	ret

00000246 <main>:
#include "MCAL/USART/USART.h"

#define F_CPU   8000000UL

int main(void)
{
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	c4 56       	subi	r28, 0x64	; 100
 250:	d1 09       	sbc	r29, r1
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
	uint8 ch;
	uint8 str[100] = {0};
 25c:	fe 01       	movw	r30, r28
 25e:	31 96       	adiw	r30, 0x01	; 1
 260:	84 e6       	ldi	r24, 0x64	; 100
 262:	df 01       	movw	r26, r30
 264:	1d 92       	st	X+, r1
 266:	8a 95       	dec	r24
 268:	e9 f7       	brne	.-6      	; 0x264 <main+0x1e>
	USART_Init();
 26a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <USART_Init>
	LCD_Init();
 26e:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Init>
	/* Replace with your application code */
	while (1)
	{
		// Test Send 
		USART_Send_char('a');
 272:	81 e6       	ldi	r24, 0x61	; 97
 274:	0e 94 9b 01 	call	0x336	; 0x336 <USART_Send_char>
		USART_Send_char('h');
 278:	88 e6       	ldi	r24, 0x68	; 104
 27a:	0e 94 9b 01 	call	0x336	; 0x336 <USART_Send_char>
		USART_Send_char('m');
 27e:	8d e6       	ldi	r24, 0x6D	; 109
 280:	0e 94 9b 01 	call	0x336	; 0x336 <USART_Send_char>
		USART_Send_char('e');
 284:	85 e6       	ldi	r24, 0x65	; 101
 286:	0e 94 9b 01 	call	0x336	; 0x336 <USART_Send_char>
		USART_Send_char('d');
 28a:	84 e6       	ldi	r24, 0x64	; 100
 28c:	0e 94 9b 01 	call	0x336	; 0x336 <USART_Send_char>
		USART_Send_char('\r');
 290:	8d e0       	ldi	r24, 0x0D	; 13
 292:	0e 94 9b 01 	call	0x336	; 0x336 <USART_Send_char>
		
		USART_Send_str("Nasser");
 296:	80 e6       	ldi	r24, 0x60	; 96
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 a3 01 	call	0x346	; 0x346 <USART_Send_str>
		
		// Test Receive
		
		ch = USART_Recieve_char();
 29e:	0e 94 9f 01 	call	0x33e	; 0x33e <USART_Recieve_char>
 2a2:	18 2f       	mov	r17, r24
		LCD_Clear_Screen();
 2a4:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_Clear_Screen>
		LCD_Send_char(ch);
 2a8:	81 2f       	mov	r24, r17
 2aa:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Send_char>
		
		USART_Recieve_str(str);
 2ae:	ce 01       	movw	r24, r28
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	0e 94 b9 01 	call	0x372	; 0x372 <USART_Recieve_str>
		
		LCD_GotoXY(0,LCD_SECOND_LINE);
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_GotoXY>
		LCD_Send_str(str);
 2be:	ce 01       	movw	r24, r28
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_Send_str>
 2c6:	d5 cf       	rjmp	.-86     	; 0x272 <main+0x2c>

000002c8 <USART_Init>:
	
	SetBit(UCSRC,UMSEL); // Synchronous_mode
	 UBRR_value = (F_CPU / ( (uint64) 2 * Baud_rate) )-1 ;

	#else
	ClearBit(UCSRC,UMSEL); // ASynchronous_mode "default"
 2c8:	80 b5       	in	r24, 0x20	; 32
 2ca:	8f 7b       	andi	r24, 0xBF	; 191
 2cc:	80 bd       	out	0x20, r24	; 32

	#if speed_mode == double_speed
	SetBit(UCSRA,U2X);
	UBRR_value =  (F_CPU / ( (uint64) 8 * Baud_rate) )-1; 
	#else
	ClearBit(UCSRA,U2X);
 2ce:	8b b1       	in	r24, 0x0b	; 11
 2d0:	8d 7f       	andi	r24, 0xFD	; 253
 2d2:	8b b9       	out	0x0b, r24	; 11
	#endif
	
	//set Baud_rate
	
	
	UBRRL = (uint8)UBRR_value;
 2d4:	83 e3       	ldi	r24, 0x33	; 51
 2d6:	89 b9       	out	0x09, r24	; 9
	ClearBit(UCSRC,URSEL); // to enable writing to UBRRH_reg "default"
 2d8:	80 b5       	in	r24, 0x20	; 32
 2da:	8f 77       	andi	r24, 0x7F	; 127
 2dc:	80 bd       	out	0x20, r24	; 32
	UBRRH = (uint8)(UBRR_value >> 8);
 2de:	10 bc       	out	0x20, r1	; 32
	
	SetBit(UCSRC,URSEL); // to enable writing to UCSRC_reg "default"*/
 2e0:	80 b5       	in	r24, 0x20	; 32
 2e2:	80 68       	ori	r24, 0x80	; 128
 2e4:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRC,UCSZ0);
		SetBit(UCSRC,UCSZ1);
		SetBit(UCSRB,UCSZ2);
	//8bit"default"
	#else
		SetBit(UCSRC,UCSZ0);
 2e6:	80 b5       	in	r24, 0x20	; 32
 2e8:	82 60       	ori	r24, 0x02	; 2
 2ea:	80 bd       	out	0x20, r24	; 32
		SetBit(UCSRC,UCSZ1);
 2ec:	80 b5       	in	r24, 0x20	; 32
 2ee:	84 60       	ori	r24, 0x04	; 4
 2f0:	80 bd       	out	0x20, r24	; 32
		ClearBit(UCSRB,UCSZ2);
 2f2:	8a b1       	in	r24, 0x0a	; 10
 2f4:	8b 7f       	andi	r24, 0xFB	; 251
 2f6:	8a b9       	out	0x0a, r24	; 10
		
		ClearBit(UCSRC,UPM0);
		SetBit(UCSRC,UPM1);
		
	#else
		ClearBit(UCSRC,UPM0);
 2f8:	80 b5       	in	r24, 0x20	; 32
 2fa:	8f 7e       	andi	r24, 0xEF	; 239
 2fc:	80 bd       	out	0x20, r24	; 32
		ClearBit(UCSRC,UPM1);
 2fe:	80 b5       	in	r24, 0x20	; 32
 300:	8f 7d       	andi	r24, 0xDF	; 223
 302:	80 bd       	out	0x20, r24	; 32
	
// number of stop_bits
	#if Stop_bits_Num == bits_2
		SetBit(UCSRC, USBS);
	#else
		ClearBit(UCSRC, USBS);
 304:	80 b5       	in	r24, 0x20	; 32
 306:	87 7f       	andi	r24, 0xF7	; 247
 308:	80 bd       	out	0x20, r24	; 32
	
// Interrupts 
	#if RX_Complete_Interrupt == Enable
		SetBit(UCSRB,RXCIE);
	#else
		ClearBit(UCSRB,RXCIE);
 30a:	8a b1       	in	r24, 0x0a	; 10
 30c:	8f 77       	andi	r24, 0x7F	; 127
 30e:	8a b9       	out	0x0a, r24	; 10
	#endif

	#if TX_Complete_Interrupt == Enable
	SetBit(UCSRB,TXCIE);
	#else
	ClearBit(UCSRB,TXCIE);
 310:	8a b1       	in	r24, 0x0a	; 10
 312:	8f 7b       	andi	r24, 0xBF	; 191
 314:	8a b9       	out	0x0a, r24	; 10
	#endif

	#if UDR_Empty_Interrupt == Enable
	SetBit(UCSRB,UDRIE);
	#else
	ClearBit(UCSRB,UDRIE);
 316:	8a b1       	in	r24, 0x0a	; 10
 318:	8f 7d       	andi	r24, 0xDF	; 223
 31a:	8a b9       	out	0x0a, r24	; 10

// Multi-processor Communication Mode
	#if multi_communication_mode == Enable
		SetBit(UCSRA,MPCM);
	#else
		ClearBit(UCSRA,MPCM);
 31c:	8b b1       	in	r24, 0x0b	; 11
 31e:	8e 7f       	andi	r24, 0xFE	; 254
 320:	8b b9       	out	0x0b, r24	; 11

// set clock parity for only synchronous
	#if Clock_parity == Falling_edge
	SetBit(UCSRC,UCPOL);
	#else
	ClearBit(UCSRC,UCPOL);
 322:	80 b5       	in	r24, 0x20	; 32
 324:	8e 7f       	andi	r24, 0xFE	; 254
 326:	80 bd       	out	0x20, r24	; 32
	#endif

// Enable transmitter and receiver
	SetBit(UCSRB,TXEN);
 328:	8a b1       	in	r24, 0x0a	; 10
 32a:	88 60       	ori	r24, 0x08	; 8
 32c:	8a b9       	out	0x0a, r24	; 10
	SetBit(UCSRB,RXEN);	
 32e:	8a b1       	in	r24, 0x0a	; 10
 330:	80 61       	ori	r24, 0x10	; 16
 332:	8a b9       	out	0x0a, r24	; 10
 334:	08 95       	ret

00000336 <USART_Send_char>:
 */

void USART_Send_char(uint8 Data){
	
	// wait to end current transmission 
	while(!GetBit(UCSRA,UDRE));
 336:	5d 9b       	sbis	0x0b, 5	; 11
 338:	fe cf       	rjmp	.-4      	; 0x336 <USART_Send_char>
	// send data 
	UDR = Data;
 33a:	8c b9       	out	0x0c, r24	; 12
 33c:	08 95       	ret

0000033e <USART_Recieve_char>:
 */

uint8 USART_Recieve_char(void){
	
	// wait to read all data in buffer
	while(!GetBit(UCSRA,RXC));
 33e:	5f 9b       	sbis	0x0b, 7	; 11
 340:	fe cf       	rjmp	.-4      	; 0x33e <USART_Recieve_char>
	// return UDR (received data)
	return UDR;
 342:	8c b1       	in	r24, 0x0c	; 12
}
 344:	08 95       	ret

00000346 <USART_Send_str>:
 * @return value	:- None.
 * Note 			:- the end of USART transmission string is stop char @"USART_Config.h" file
						it blocks CPU until it Send all String
 */

void USART_Send_str(uint8* str){
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	8c 01       	movw	r16, r24
	uint8 i ;
	for (i=0 ; i<str[i];i++)
 34e:	c0 e0       	ldi	r28, 0x00	; 0
 350:	03 c0       	rjmp	.+6      	; 0x358 <USART_Send_str+0x12>
	{
		USART_Send_char(str[i]);
 352:	0e 94 9b 01 	call	0x336	; 0x336 <USART_Send_char>
						it blocks CPU until it Send all String
 */

void USART_Send_str(uint8* str){
	uint8 i ;
	for (i=0 ; i<str[i];i++)
 356:	cf 5f       	subi	r28, 0xFF	; 255
 358:	f8 01       	movw	r30, r16
 35a:	ec 0f       	add	r30, r28
 35c:	f1 1d       	adc	r31, r1
 35e:	80 81       	ld	r24, Z
 360:	c8 17       	cp	r28, r24
 362:	b8 f3       	brcs	.-18     	; 0x352 <USART_Send_str+0xc>
	{
		USART_Send_char(str[i]);
	}
	
	USART_Send_char(Stop_ch);
 364:	8d e0       	ldi	r24, 0x0D	; 13
 366:	0e 94 9b 01 	call	0x336	; 0x336 <USART_Send_char>
}
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	08 95       	ret

00000372 <USART_Recieve_str>:
 * @parameter[in]	:- str: Pointer to first location in the Buffer String
 * @return value	:- None.
 * Note 			:- it blocks CPU until it receive all String
 */

void USART_Recieve_str(uint8* Buffer){
 372:	ef 92       	push	r14
 374:	ff 92       	push	r15
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	8c 01       	movw	r16, r24
	uint8 i=0;
	
	Buffer[i]=USART_Recieve_char();
 37e:	0e 94 9f 01 	call	0x33e	; 0x33e <USART_Recieve_char>
 382:	f8 01       	movw	r30, r16
 384:	80 83       	st	Z, r24
 * @return value	:- None.
 * Note 			:- it blocks CPU until it receive all String
 */

void USART_Recieve_str(uint8* Buffer){
	uint8 i=0;
 386:	c0 e0       	ldi	r28, 0x00	; 0
	
	Buffer[i]=USART_Recieve_char();
	// do....while
	while (Buffer[i] != Stop_ch)
 388:	08 c0       	rjmp	.+16     	; 0x39a <USART_Recieve_str+0x28>
	{
		i++;
 38a:	cf 5f       	subi	r28, 0xFF	; 255
		Buffer[i]=USART_Recieve_char();
 38c:	78 01       	movw	r14, r16
 38e:	ec 0e       	add	r14, r28
 390:	f1 1c       	adc	r15, r1
 392:	0e 94 9f 01 	call	0x33e	; 0x33e <USART_Recieve_char>
 396:	f7 01       	movw	r30, r14
 398:	80 83       	st	Z, r24
void USART_Recieve_str(uint8* Buffer){
	uint8 i=0;
	
	Buffer[i]=USART_Recieve_char();
	// do....while
	while (Buffer[i] != Stop_ch)
 39a:	f8 01       	movw	r30, r16
 39c:	ec 0f       	add	r30, r28
 39e:	f1 1d       	adc	r31, r1
 3a0:	80 81       	ld	r24, Z
 3a2:	8d 30       	cpi	r24, 0x0D	; 13
 3a4:	91 f7       	brne	.-28     	; 0x38a <USART_Recieve_str+0x18>
	{
		i++;
		Buffer[i]=USART_Recieve_char();
	}
	Buffer[i]='\0';	
 3a6:	10 82       	st	Z, r1
}
 3a8:	cf 91       	pop	r28
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	ff 90       	pop	r15
 3b0:	ef 90       	pop	r14
 3b2:	08 95       	ret

000003b4 <_exit>:
 3b4:	f8 94       	cli

000003b6 <__stop_program>:
 3b6:	ff cf       	rjmp	.-2      	; 0x3b6 <__stop_program>
