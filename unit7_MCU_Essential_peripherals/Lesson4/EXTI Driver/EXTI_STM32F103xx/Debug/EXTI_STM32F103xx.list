
EXTI_STM32F103xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000de8  08000de8  00010de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e10  08000e10  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08000e10  08000e10  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e10  08000e10  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e10  08000e10  00010e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e14  08000e14  00010e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08000e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000010  08000e28  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000e28  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003fb3  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009cc  00000000  00000000  00023fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b01  00000000  00000000  000249b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001e0  00000000  00000000  000254c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000188  00000000  00000000  000256a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002bfb  00000000  00000000  00025828  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002277  00000000  00000000  00028423  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000aae9  00000000  00000000  0002a69a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00035183  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005dc  00000000  00000000  00035200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08000dd0 	.word	0x08000dd0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08000dd0 	.word	0x08000dd0

08000170 <Delay_ms>:

// General variables
uint16_t LCD_DataPins[8] = {LCD_D0,LCD_D1,LCD_D2,LCD_D3,LCD_D4,LCD_D5,LCD_D6,LCD_D7};
GPIO_PinConfig_t PinConfig;

void Delay_ms(uint32_t milles){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<milles;i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <Delay_ms+0x26>
		for(j=0;j<255;j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <Delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <Delay_ms+0x14>
	for(i=0;i<milles;i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <Delay_ms+0xe>
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <config_LCD_Pin_INPUT>:

void config_LCD_Pin_INPUT(){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
	// Set LCD_Dx x[0:7] as floating Input
	//	LCD_PORT_DDR &= ~(0xFF << Data_shift);  ******** update using for loop
	for(uint8_t i=0;i<8;i++){
 80001ae:	2300      	movs	r3, #0
 80001b0:	71fb      	strb	r3, [r7, #7]
 80001b2:	e00f      	b.n	80001d4 <config_LCD_Pin_INPUT+0x2c>
		PinConfig.GPIO_PinNumber = LCD_DataPins[i];
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	4a0b      	ldr	r2, [pc, #44]	; (80001e4 <config_LCD_Pin_INPUT+0x3c>)
 80001b8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80001bc:	4b0a      	ldr	r3, [pc, #40]	; (80001e8 <config_LCD_Pin_INPUT+0x40>)
 80001be:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode = GPIO_MODE_INPUT_PU;
 80001c0:	4b09      	ldr	r3, [pc, #36]	; (80001e8 <config_LCD_Pin_INPUT+0x40>)
 80001c2:	2202      	movs	r2, #2
 80001c4:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80001c6:	4908      	ldr	r1, [pc, #32]	; (80001e8 <config_LCD_Pin_INPUT+0x40>)
 80001c8:	4808      	ldr	r0, [pc, #32]	; (80001ec <config_LCD_Pin_INPUT+0x44>)
 80001ca:	f000 fd22 	bl	8000c12 <MCAL_GPIO_Init>
	for(uint8_t i=0;i<8;i++){
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	3301      	adds	r3, #1
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	2b07      	cmp	r3, #7
 80001d8:	d9ec      	bls.n	80001b4 <config_LCD_Pin_INPUT+0xc>
	}


}
 80001da:	bf00      	nop
 80001dc:	3708      	adds	r7, #8
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	20000000 	.word	0x20000000
 80001e8:	2000002c 	.word	0x2000002c
 80001ec:	40010800 	.word	0x40010800

080001f0 <config_LCD_Pin_OUTPUT>:
void config_LCD_Pin_OUTPUT(){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
	// Set LCD_Dx x[0:7] as push-pull Output
	//	LCD_PORT_DDR |= (0xFF << Data_shift); ******** update using for loop
	for(uint8_t i=0;i<8;i++){
 80001f6:	2300      	movs	r3, #0
 80001f8:	71fb      	strb	r3, [r7, #7]
 80001fa:	e012      	b.n	8000222 <config_LCD_Pin_OUTPUT+0x32>
		PinConfig.GPIO_PinNumber = LCD_DataPins[i];
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	4a0c      	ldr	r2, [pc, #48]	; (8000230 <config_LCD_Pin_OUTPUT+0x40>)
 8000200:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000204:	4b0b      	ldr	r3, [pc, #44]	; (8000234 <config_LCD_Pin_OUTPUT+0x44>)
 8000206:	801a      	strh	r2, [r3, #0]
			PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <config_LCD_Pin_OUTPUT+0x44>)
 800020a:	2204      	movs	r2, #4
 800020c:	709a      	strb	r2, [r3, #2]
			PinConfig.GPIO_OUTPUT_Speed =GPIO_SPEED_10M;
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <config_LCD_Pin_OUTPUT+0x44>)
 8000210:	2201      	movs	r2, #1
 8000212:	70da      	strb	r2, [r3, #3]
			MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000214:	4907      	ldr	r1, [pc, #28]	; (8000234 <config_LCD_Pin_OUTPUT+0x44>)
 8000216:	4808      	ldr	r0, [pc, #32]	; (8000238 <config_LCD_Pin_OUTPUT+0x48>)
 8000218:	f000 fcfb 	bl	8000c12 <MCAL_GPIO_Init>
	for(uint8_t i=0;i<8;i++){
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	3301      	adds	r3, #1
 8000220:	71fb      	strb	r3, [r7, #7]
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	2b07      	cmp	r3, #7
 8000226:	d9e9      	bls.n	80001fc <config_LCD_Pin_OUTPUT+0xc>
	}

}
 8000228:	bf00      	nop
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000000 	.word	0x20000000
 8000234:	2000002c 	.word	0x2000002c
 8000238:	40010800 	.word	0x40010800

0800023c <HAL_LCD_Isbusy>:

void HAL_LCD_Isbusy(){
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	//port>>input +> RW>>on RS>>off +> check d7 value
	// Set LCD_Dx x[0:7] as floating Input
	config_LCD_Pin_INPUT();
 8000240:	f7ff ffb2 	bl	80001a8 <config_LCD_Pin_INPUT>

	// Set LCD_RW pin
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, RW, GPIO_PIN_SET);
 8000244:	2201      	movs	r2, #1
 8000246:	f44f 7100 	mov.w	r1, #512	; 0x200
 800024a:	480a      	ldr	r0, [pc, #40]	; (8000274 <HAL_LCD_Isbusy+0x38>)
 800024c:	f000 fd71 	bl	8000d32 <MCAL_GPIO_WritePin>
	// Set LCD_RS pin
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, RS, GPIO_PIN_RESET);
 8000250:	2200      	movs	r2, #0
 8000252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000256:	4807      	ldr	r0, [pc, #28]	; (8000274 <HAL_LCD_Isbusy+0x38>)
 8000258:	f000 fd6b 	bl	8000d32 <MCAL_GPIO_WritePin>

	HAL_LCD_Kick();
 800025c:	f000 f866 	bl	800032c <HAL_LCD_Kick>
	// Set LCD_Dx x[0:7] as push-pull Output
	config_LCD_Pin_OUTPUT();
 8000260:	f7ff ffc6 	bl	80001f0 <config_LCD_Pin_OUTPUT>


	MCAL_GPIO_WritePin(LCD_CTRL_PORT, RW, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	f44f 7100 	mov.w	r1, #512	; 0x200
 800026a:	4802      	ldr	r0, [pc, #8]	; (8000274 <HAL_LCD_Isbusy+0x38>)
 800026c:	f000 fd61 	bl	8000d32 <MCAL_GPIO_WritePin>



}
 8000270:	bf00      	nop
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40010800 	.word	0x40010800

08000278 <HAL_LCD_Init>:

void HAL_LCD_Init(){
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	Delay_ms(20);
 800027c:	2014      	movs	r0, #20
 800027e:	f7ff ff77 	bl	8000170 <Delay_ms>
	// SET EN RW RS as Push-pull OUTPUT
	PinConfig.GPIO_PinNumber = EN;
 8000282:	4b28      	ldr	r3, [pc, #160]	; (8000324 <HAL_LCD_Init+0xac>)
 8000284:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000288:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800028a:	4b26      	ldr	r3, [pc, #152]	; (8000324 <HAL_LCD_Init+0xac>)
 800028c:	2204      	movs	r2, #4
 800028e:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_Speed =GPIO_SPEED_10M;
 8000290:	4b24      	ldr	r3, [pc, #144]	; (8000324 <HAL_LCD_Init+0xac>)
 8000292:	2201      	movs	r2, #1
 8000294:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_PORT, &PinConfig);
 8000296:	4923      	ldr	r1, [pc, #140]	; (8000324 <HAL_LCD_Init+0xac>)
 8000298:	4823      	ldr	r0, [pc, #140]	; (8000328 <HAL_LCD_Init+0xb0>)
 800029a:	f000 fcba 	bl	8000c12 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = RS;
 800029e:	4b21      	ldr	r3, [pc, #132]	; (8000324 <HAL_LCD_Init+0xac>)
 80002a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002a4:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80002a6:	4b1f      	ldr	r3, [pc, #124]	; (8000324 <HAL_LCD_Init+0xac>)
 80002a8:	2204      	movs	r2, #4
 80002aa:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_Speed =GPIO_SPEED_10M;
 80002ac:	4b1d      	ldr	r3, [pc, #116]	; (8000324 <HAL_LCD_Init+0xac>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_PORT, &PinConfig);
 80002b2:	491c      	ldr	r1, [pc, #112]	; (8000324 <HAL_LCD_Init+0xac>)
 80002b4:	481c      	ldr	r0, [pc, #112]	; (8000328 <HAL_LCD_Init+0xb0>)
 80002b6:	f000 fcac 	bl	8000c12 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = RW;
 80002ba:	4b1a      	ldr	r3, [pc, #104]	; (8000324 <HAL_LCD_Init+0xac>)
 80002bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002c0:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80002c2:	4b18      	ldr	r3, [pc, #96]	; (8000324 <HAL_LCD_Init+0xac>)
 80002c4:	2204      	movs	r2, #4
 80002c6:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_Speed =GPIO_SPEED_10M;
 80002c8:	4b16      	ldr	r3, [pc, #88]	; (8000324 <HAL_LCD_Init+0xac>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_PORT, &PinConfig);
 80002ce:	4915      	ldr	r1, [pc, #84]	; (8000324 <HAL_LCD_Init+0xac>)
 80002d0:	4815      	ldr	r0, [pc, #84]	; (8000328 <HAL_LCD_Init+0xb0>)
 80002d2:	f000 fc9e 	bl	8000c12 <MCAL_GPIO_Init>
	
	// Set LCD_Dx x[0:7] as push-pull Output
		config_LCD_Pin_OUTPUT();
 80002d6:	f7ff ff8b 	bl	80001f0 <config_LCD_Pin_OUTPUT>

	// Reset EN RW RS Value
//	LCD_CTRL_PORT &= ~(1<<EN | 1<<RW | 1<<RS );
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, EN, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002e0:	4811      	ldr	r0, [pc, #68]	; (8000328 <HAL_LCD_Init+0xb0>)
 80002e2:	f000 fd26 	bl	8000d32 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, RS, GPIO_PIN_RESET);
 80002e6:	2200      	movs	r2, #0
 80002e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ec:	480e      	ldr	r0, [pc, #56]	; (8000328 <HAL_LCD_Init+0xb0>)
 80002ee:	f000 fd20 	bl	8000d32 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, RW, GPIO_PIN_RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f8:	480b      	ldr	r0, [pc, #44]	; (8000328 <HAL_LCD_Init+0xb0>)
 80002fa:	f000 fd1a 	bl	8000d32 <MCAL_GPIO_WritePin>



	Delay_ms(15);
 80002fe:	200f      	movs	r0, #15
 8000300:	f7ff ff36 	bl	8000170 <Delay_ms>

	HAL_LCD_Clear_Screen();
 8000304:	f000 f84a 	bl	800039c <HAL_LCD_Clear_Screen>
//
////	#ifdef EIGHT_BIT_MODE
	HAL_LCD_CMD(LCD_FUNCTION_8BIT_2LINES); // need more generalized
 8000308:	2038      	movs	r0, #56	; 0x38
 800030a:	f000 f825 	bl	8000358 <HAL_LCD_CMD>
////	#ifdef FOUR_BIT_MODE
////
////	HAL_LCD_CMD(LCD_RETURN_HOME);
////	HAL_LCD_CMD(LCD_FUNCTION_4BIT_2LINES); // need more generalized
////	#endif
	HAL_LCD_CMD(LCD_ENTRY_MODE);
 800030e:	2006      	movs	r0, #6
 8000310:	f000 f822 	bl	8000358 <HAL_LCD_CMD>
	HAL_LCD_CMD(LCD_BEGIN_AT_FIRST_ROW);
 8000314:	2080      	movs	r0, #128	; 0x80
 8000316:	f000 f81f 	bl	8000358 <HAL_LCD_CMD>
	HAL_LCD_CMD(LCD_DISP_ON_CURSOR_BLINK);
 800031a:	200f      	movs	r0, #15
 800031c:	f000 f81c 	bl	8000358 <HAL_LCD_CMD>
	
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	2000002c 	.word	0x2000002c
 8000328:	40010800 	.word	0x40010800

0800032c <HAL_LCD_Kick>:

void HAL_LCD_Kick(){
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	// Reset EN
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, EN, GPIO_PIN_SET);
 8000330:	2201      	movs	r2, #1
 8000332:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000336:	4807      	ldr	r0, [pc, #28]	; (8000354 <HAL_LCD_Kick+0x28>)
 8000338:	f000 fcfb 	bl	8000d32 <MCAL_GPIO_WritePin>
	Delay_ms(50);
 800033c:	2032      	movs	r0, #50	; 0x32
 800033e:	f7ff ff17 	bl	8000170 <Delay_ms>
	// set EN
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, EN, GPIO_PIN_RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000348:	4802      	ldr	r0, [pc, #8]	; (8000354 <HAL_LCD_Kick+0x28>)
 800034a:	f000 fcf2 	bl	8000d32 <MCAL_GPIO_WritePin>
}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40010800 	.word	0x40010800

08000358 <HAL_LCD_CMD>:
void HAL_LCD_CMD(unsigned char cmd){
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
	//#ifdef EIGHT_BIT_MODE
		HAL_LCD_Isbusy();
 8000362:	f7ff ff6b 	bl	800023c <HAL_LCD_Isbusy>
		
//		write Port with command
//		LCD_PORT = cmd;
		MCAL_GPIO_WritePort(LCD_PORT, (uint8_t) cmd); // need to be More Generic
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	b29b      	uxth	r3, r3
 800036a:	4619      	mov	r1, r3
 800036c:	480a      	ldr	r0, [pc, #40]	; (8000398 <HAL_LCD_CMD+0x40>)
 800036e:	f000 fcfb 	bl	8000d68 <MCAL_GPIO_WritePort>
		// reset RW and RS Value
//		LCD_CTRL_PORT &= ~(1<<RW | 1<<RS);
		MCAL_GPIO_WritePin(LCD_CTRL_PORT, RW, GPIO_PIN_RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000378:	4807      	ldr	r0, [pc, #28]	; (8000398 <HAL_LCD_CMD+0x40>)
 800037a:	f000 fcda 	bl	8000d32 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_CTRL_PORT, RS, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <HAL_LCD_CMD+0x40>)
 8000386:	f000 fcd4 	bl	8000d32 <MCAL_GPIO_WritePin>
		HAL_LCD_Kick();
 800038a:	f7ff ffcf 	bl	800032c <HAL_LCD_Kick>
//	LCD_PORT = (LCD_PORT & 0x0F) |(cmd << Data_shift);
//	LCD_CTRL_PORT &= ~(1<<RW | 1<<RS);
//	HAL_LCD_Kick();
//	#endif
	
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40010800 	.word	0x40010800

0800039c <HAL_LCD_Clear_Screen>:

void HAL_LCD_Clear_Screen(void){
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	HAL_LCD_CMD(LCD_CLEAR_SCREEN);
 80003a0:	2001      	movs	r0, #1
 80003a2:	f7ff ffd9 	bl	8000358 <HAL_LCD_CMD>
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}

080003aa <HAL_LCD_GotoXY>:
void HAL_LCD_GotoXY(unsigned char pos , unsigned char line){
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b082      	sub	sp, #8
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	4603      	mov	r3, r0
 80003b2:	460a      	mov	r2, r1
 80003b4:	71fb      	strb	r3, [r7, #7]
 80003b6:	4613      	mov	r3, r2
 80003b8:	71bb      	strb	r3, [r7, #6]
	if (line == LCD_FIRST_LINE)
 80003ba:	79bb      	ldrb	r3, [r7, #6]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d109      	bne.n	80003d4 <HAL_LCD_GotoXY+0x2a>
	{
		if(pos < 16 && pos >=0)
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	2b0f      	cmp	r3, #15
 80003c4:	d812      	bhi.n	80003ec <HAL_LCD_GotoXY+0x42>
			HAL_LCD_CMD(LCD_BEGIN_AT_FIRST_ROW + pos);
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	3b80      	subs	r3, #128	; 0x80
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ffc3 	bl	8000358 <HAL_LCD_CMD>
	else if (line == LCD_SECOND_LINE)
	{
		if(pos < 16 && pos >=0)
			HAL_LCD_CMD(LCD_BEGIN_AT_SECOND_ROW + pos);
	}
}
 80003d2:	e00b      	b.n	80003ec <HAL_LCD_GotoXY+0x42>
	else if (line == LCD_SECOND_LINE)
 80003d4:	79bb      	ldrb	r3, [r7, #6]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d108      	bne.n	80003ec <HAL_LCD_GotoXY+0x42>
		if(pos < 16 && pos >=0)
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	2b0f      	cmp	r3, #15
 80003de:	d805      	bhi.n	80003ec <HAL_LCD_GotoXY+0x42>
			HAL_LCD_CMD(LCD_BEGIN_AT_SECOND_ROW + pos);
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	3b40      	subs	r3, #64	; 0x40
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ffb6 	bl	8000358 <HAL_LCD_CMD>
}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <HAL_LCD_Send_char>:

void HAL_LCD_Send_char(unsigned char ch){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]


//	#ifdef EIGHT_BIT_MODE
		HAL_LCD_Isbusy();
 80003fe:	f7ff ff1d 	bl	800023c <HAL_LCD_Isbusy>
		// SET RS
		//		LCD_CTRL_PORT |= (1<<RS);
		MCAL_GPIO_WritePin(LCD_CTRL_PORT, RS, GPIO_PIN_SET);
 8000402:	2201      	movs	r2, #1
 8000404:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000408:	480d      	ldr	r0, [pc, #52]	; (8000440 <HAL_LCD_Send_char+0x4c>)
 800040a:	f000 fc92 	bl	8000d32 <MCAL_GPIO_WritePin>

		//Send Data
		MCAL_GPIO_WritePort(LCD_PORT, (uint8_t) ch); // need to be More Generic
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	b29b      	uxth	r3, r3
 8000412:	4619      	mov	r1, r3
 8000414:	480a      	ldr	r0, [pc, #40]	; (8000440 <HAL_LCD_Send_char+0x4c>)
 8000416:	f000 fca7 	bl	8000d68 <MCAL_GPIO_WritePort>


		// SET RS
		//		LCD_CTRL_PORT |= (1<<RS);
		MCAL_GPIO_WritePin(LCD_CTRL_PORT, RS, GPIO_PIN_SET);
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000420:	4807      	ldr	r0, [pc, #28]	; (8000440 <HAL_LCD_Send_char+0x4c>)
 8000422:	f000 fc86 	bl	8000d32 <MCAL_GPIO_WritePin>
		//Reset RW
		//		LCD_CTRL_PORT &= ~(1<<RW );
		MCAL_GPIO_WritePin(LCD_CTRL_PORT, RW, GPIO_PIN_RESET);
 8000426:	2200      	movs	r2, #0
 8000428:	f44f 7100 	mov.w	r1, #512	; 0x200
 800042c:	4804      	ldr	r0, [pc, #16]	; (8000440 <HAL_LCD_Send_char+0x4c>)
 800042e:	f000 fc80 	bl	8000d32 <MCAL_GPIO_WritePin>
		HAL_LCD_Kick();
 8000432:	f7ff ff7b 	bl	800032c <HAL_LCD_Kick>
//		LCD_PORT = (LCD_PORT & 0x0F) |(ch << Data_shift);
//		LCD_CTRL_PORT |= (1<<RS);
//		LCD_CTRL_PORT &= ~(1<<RW );
//		HAL_LCD_Kick();
//	#endif
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40010800 	.word	0x40010800

08000444 <HAL_LCD_Send_str>:
void HAL_LCD_Send_str(char* str){
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	int count=0;
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]
	while (*str > 0)
 8000450:	e01f      	b.n	8000492 <HAL_LCD_Send_str+0x4e>
	{
		
		HAL_LCD_Send_char(*str++);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	1c5a      	adds	r2, r3, #1
 8000456:	607a      	str	r2, [r7, #4]
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ffca 	bl	80003f4 <HAL_LCD_Send_char>
		count++;
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	3301      	adds	r3, #1
 8000464:	60fb      	str	r3, [r7, #12]
		if(count == 16 )
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	2b10      	cmp	r3, #16
 800046a:	d104      	bne.n	8000476 <HAL_LCD_Send_str+0x32>
		{
			HAL_LCD_GotoXY(0,LCD_SECOND_LINE);
 800046c:	2101      	movs	r1, #1
 800046e:	2000      	movs	r0, #0
 8000470:	f7ff ff9b 	bl	80003aa <HAL_LCD_GotoXY>
 8000474:	e00d      	b.n	8000492 <HAL_LCD_Send_str+0x4e>
		}
		else if (count == 32 || count == 33)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	2b20      	cmp	r3, #32
 800047a:	d002      	beq.n	8000482 <HAL_LCD_Send_str+0x3e>
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	2b21      	cmp	r3, #33	; 0x21
 8000480:	d107      	bne.n	8000492 <HAL_LCD_Send_str+0x4e>
		{
			HAL_LCD_Clear_Screen();
 8000482:	f7ff ff8b 	bl	800039c <HAL_LCD_Clear_Screen>
			HAL_LCD_GotoXY(0,LCD_FIRST_LINE);
 8000486:	2100      	movs	r1, #0
 8000488:	2000      	movs	r0, #0
 800048a:	f7ff ff8e 	bl	80003aa <HAL_LCD_GotoXY>
			count = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
	while (*str > 0)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d1db      	bne.n	8000452 <HAL_LCD_Send_str+0xe>
		}
	}
}
 800049a:	bf00      	nop
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <EXTI9_Callback>:
#include "../stm32f103c6_Drivers/Inc/stm32f103c6_GPIO_Driver.h"
#include "../stm32f103c6_Drivers/Inc/stm32f103c6_EXTI.h"
#include "../HAL/LCD/LCD.h"

uint8_t IRQ_Flag ;
void EXTI9_Callback(){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <EXTI9_Callback+0x1c>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	701a      	strb	r2, [r3, #0]

	HAL_LCD_Send_str("IRQ EXTI9 is happened (_|-)");
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <EXTI9_Callback+0x20>)
 80004b0:	f7ff ffc8 	bl	8000444 <HAL_LCD_Send_str>
	Delay_ms(1000);
 80004b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004b8:	f7ff fe5a 	bl	8000170 <Delay_ms>
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000030 	.word	0x20000030
 80004c4:	08000de8 	.word	0x08000de8

080004c8 <Clock_init>:


void Clock_init(){
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <Clock_init+0x30>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a09      	ldr	r2, [pc, #36]	; (80004f8 <Clock_init+0x30>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <Clock_init+0x30>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <Clock_init+0x30>)
 80004de:	f043 0308 	orr.w	r3, r3, #8
 80004e2:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80004e4:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <Clock_init+0x30>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a03      	ldr	r2, [pc, #12]	; (80004f8 <Clock_init+0x30>)
 80004ea:	f043 0301 	orr.w	r3, r3, #1
 80004ee:	6193      	str	r3, [r2, #24]
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	40021000 	.word	0x40021000

080004fc <main>:


int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
	Clock_init();
 8000502:	f7ff ffe1 	bl	80004c8 <Clock_init>
	HAL_LCD_Init();
 8000506:	f7ff feb7 	bl	8000278 <HAL_LCD_Init>
	EXTI_PinConfig_t EXTI_Config;
	EXTI_Config.EXTI_PIN =EXTI9PB9;
 800050a:	4a0c      	ldr	r2, [pc, #48]	; (800053c <main+0x40>)
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000510:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_Config.Trigger_Case = EXTI_Trigger_RISINGAndFALLING;
 8000514:	2302      	movs	r3, #2
 8000516:	743b      	strb	r3, [r7, #16]
	EXTI_Config.Ptr_IRQ_CallBack = EXTI9_Callback;
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <main+0x44>)
 800051a:	617b      	str	r3, [r7, #20]
	EXTI_Config.IRQ_EN = EXTI_IRQ_Enable;
 800051c:	2301      	movs	r3, #1
 800051e:	747b      	strb	r3, [r7, #17]

	MCAL_EXTI_GPIO_Init(&EXTI_Config);
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f9f6 	bl	8000914 <MCAL_EXTI_GPIO_Init>


	while(1){
		if(IRQ_Flag){
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <main+0x48>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d0fb      	beq.n	8000528 <main+0x2c>
		HAL_LCD_Clear_Screen();
 8000530:	f7ff ff34 	bl	800039c <HAL_LCD_Clear_Screen>
		IRQ_Flag=0;
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <main+0x48>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
		if(IRQ_Flag){
 800053a:	e7f5      	b.n	8000528 <main+0x2c>
 800053c:	08000e04 	.word	0x08000e04
 8000540:	080004a5 	.word	0x080004a5
 8000544:	20000030 	.word	0x20000030

08000548 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000548:	480d      	ldr	r0, [pc, #52]	; (8000580 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800054a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800054c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <LoopForever+0x6>)
  ldr r1, =_edata
 8000552:	490d      	ldr	r1, [pc, #52]	; (8000588 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000554:	4a0d      	ldr	r2, [pc, #52]	; (800058c <LoopForever+0xe>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000558:	e002      	b.n	8000560 <LoopCopyDataInit>

0800055a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800055c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055e:	3304      	adds	r3, #4

08000560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000564:	d3f9      	bcc.n	800055a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000566:	4a0a      	ldr	r2, [pc, #40]	; (8000590 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000568:	4c0a      	ldr	r4, [pc, #40]	; (8000594 <LoopForever+0x16>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800056c:	e001      	b.n	8000572 <LoopFillZerobss>

0800056e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000570:	3204      	adds	r2, #4

08000572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000574:	d3fb      	bcc.n	800056e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000576:	f000 fc07 	bl	8000d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800057a:	f7ff ffbf 	bl	80004fc <main>

0800057e <LoopForever>:

LoopForever:
    b LoopForever
 800057e:	e7fe      	b.n	800057e <LoopForever>
  ldr   r0, =_estack
 8000580:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000588:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800058c:	08000e18 	.word	0x08000e18
  ldr r2, =_sbss
 8000590:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000594:	20000070 	.word	0x20000070

08000598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000598:	e7fe      	b.n	8000598 <ADC1_2_IRQHandler>
	...

0800059c <Enable_NVIC>:
 * @parameter[in]			   :- take number of Selected IRQ
 * @return value 			   :- none
 * Note                        :- none
 *================================================================ */

void Enable_NVIC(uint16_t u16IRQ){
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]
	switch(u16IRQ)
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	2b0f      	cmp	r3, #15
 80005aa:	d854      	bhi.n	8000656 <Enable_NVIC+0xba>
 80005ac:	a201      	add	r2, pc, #4	; (adr r2, 80005b4 <Enable_NVIC+0x18>)
 80005ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b2:	bf00      	nop
 80005b4:	080005f5 	.word	0x080005f5
 80005b8:	08000603 	.word	0x08000603
 80005bc:	08000611 	.word	0x08000611
 80005c0:	0800061f 	.word	0x0800061f
 80005c4:	0800062d 	.word	0x0800062d
 80005c8:	0800063b 	.word	0x0800063b
 80005cc:	0800063b 	.word	0x0800063b
 80005d0:	0800063b 	.word	0x0800063b
 80005d4:	0800063b 	.word	0x0800063b
 80005d8:	0800063b 	.word	0x0800063b
 80005dc:	08000649 	.word	0x08000649
 80005e0:	08000649 	.word	0x08000649
 80005e4:	08000649 	.word	0x08000649
 80005e8:	08000649 	.word	0x08000649
 80005ec:	08000649 	.word	0x08000649
 80005f0:	08000649 	.word	0x08000649
	{
		case EXTI0:
				NVIC_IRQ6_EXTI0_Enable();
 80005f4:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <Enable_NVIC+0xc4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a19      	ldr	r2, [pc, #100]	; (8000660 <Enable_NVIC+0xc4>)
 80005fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005fe:	6013      	str	r3, [r2, #0]
				break;
 8000600:	e029      	b.n	8000656 <Enable_NVIC+0xba>

		case EXTI1:
				NVIC_IRQ7_EXTI1_Enable();
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <Enable_NVIC+0xc4>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a16      	ldr	r2, [pc, #88]	; (8000660 <Enable_NVIC+0xc4>)
 8000608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060c:	6013      	str	r3, [r2, #0]
				break;
 800060e:	e022      	b.n	8000656 <Enable_NVIC+0xba>
		case EXTI2:
				NVIC_IRQ8_EXTI2_Enable();
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <Enable_NVIC+0xc4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a12      	ldr	r2, [pc, #72]	; (8000660 <Enable_NVIC+0xc4>)
 8000616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800061a:	6013      	str	r3, [r2, #0]
				break;
 800061c:	e01b      	b.n	8000656 <Enable_NVIC+0xba>
		case EXTI3:
				NVIC_IRQ9_EXTI3_Enable();
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <Enable_NVIC+0xc4>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <Enable_NVIC+0xc4>)
 8000624:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000628:	6013      	str	r3, [r2, #0]
				break;
 800062a:	e014      	b.n	8000656 <Enable_NVIC+0xba>
		case EXTI4:
				NVIC_IRQ10_EXTI4_Enable();
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <Enable_NVIC+0xc4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <Enable_NVIC+0xc4>)
 8000632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000636:	6013      	str	r3, [r2, #0]
				break;
 8000638:	e00d      	b.n	8000656 <Enable_NVIC+0xba>
		case EXTI5:
		case EXTI6:
		case EXTI7:
		case EXTI8:
		case EXTI9:
				NVIC_IRQ23_EXTI5_9_Enable();
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <Enable_NVIC+0xc4>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a08      	ldr	r2, [pc, #32]	; (8000660 <Enable_NVIC+0xc4>)
 8000640:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000644:	6013      	str	r3, [r2, #0]
				break;
 8000646:	e006      	b.n	8000656 <Enable_NVIC+0xba>
		case EXTI11:
		case EXTI12:
		case EXTI13:
		case EXTI14:
		case EXTI15:
				NVIC_IRQ40_EXTI10_15_Enable();
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <Enable_NVIC+0xc8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a05      	ldr	r2, [pc, #20]	; (8000664 <Enable_NVIC+0xc8>)
 800064e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000652:	6013      	str	r3, [r2, #0]
				break;
 8000654:	bf00      	nop
	}

}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	e000e100 	.word	0xe000e100
 8000664:	e000e104 	.word	0xe000e104

08000668 <Disable_NVIC>:
 * @parameter[in]			   :- take number of Selected IRQ
 * @return value 			   :- none
 * Note                        :- none
 *================================================================ */

void Disable_NVIC(uint16_t u16IRQ){
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	80fb      	strh	r3, [r7, #6]

	switch(u16IRQ)
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	2b0f      	cmp	r3, #15
 8000676:	d854      	bhi.n	8000722 <Disable_NVIC+0xba>
 8000678:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <Disable_NVIC+0x18>)
 800067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067e:	bf00      	nop
 8000680:	080006c1 	.word	0x080006c1
 8000684:	080006cf 	.word	0x080006cf
 8000688:	080006dd 	.word	0x080006dd
 800068c:	080006eb 	.word	0x080006eb
 8000690:	080006f9 	.word	0x080006f9
 8000694:	08000707 	.word	0x08000707
 8000698:	08000707 	.word	0x08000707
 800069c:	08000707 	.word	0x08000707
 80006a0:	08000707 	.word	0x08000707
 80006a4:	08000707 	.word	0x08000707
 80006a8:	08000715 	.word	0x08000715
 80006ac:	08000715 	.word	0x08000715
 80006b0:	08000715 	.word	0x08000715
 80006b4:	08000715 	.word	0x08000715
 80006b8:	08000715 	.word	0x08000715
 80006bc:	08000715 	.word	0x08000715
	{
		case EXTI0:
				NVIC_IRQ6_EXTI0_Disable();
 80006c0:	4b1a      	ldr	r3, [pc, #104]	; (800072c <Disable_NVIC+0xc4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a19      	ldr	r2, [pc, #100]	; (800072c <Disable_NVIC+0xc4>)
 80006c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ca:	6013      	str	r3, [r2, #0]
				break;
 80006cc:	e029      	b.n	8000722 <Disable_NVIC+0xba>

		case EXTI1:
				NVIC_IRQ7_EXTI1_Disable();
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <Disable_NVIC+0xc4>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a16      	ldr	r2, [pc, #88]	; (800072c <Disable_NVIC+0xc4>)
 80006d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d8:	6013      	str	r3, [r2, #0]
				break;
 80006da:	e022      	b.n	8000722 <Disable_NVIC+0xba>
		case EXTI2:
				NVIC_IRQ8_EXTI2_Disable();
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <Disable_NVIC+0xc4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a12      	ldr	r2, [pc, #72]	; (800072c <Disable_NVIC+0xc4>)
 80006e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006e6:	6013      	str	r3, [r2, #0]
				break;
 80006e8:	e01b      	b.n	8000722 <Disable_NVIC+0xba>
		case EXTI3:
				NVIC_IRQ9_EXTI3_Disable();
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <Disable_NVIC+0xc4>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a0f      	ldr	r2, [pc, #60]	; (800072c <Disable_NVIC+0xc4>)
 80006f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006f4:	6013      	str	r3, [r2, #0]
				break;
 80006f6:	e014      	b.n	8000722 <Disable_NVIC+0xba>
		case EXTI4:
				NVIC_IRQ10_EXTI4_Disable();
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <Disable_NVIC+0xc4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a0b      	ldr	r2, [pc, #44]	; (800072c <Disable_NVIC+0xc4>)
 80006fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000702:	6013      	str	r3, [r2, #0]
				break;
 8000704:	e00d      	b.n	8000722 <Disable_NVIC+0xba>
		case EXTI5:
		case EXTI6:
		case EXTI7:
		case EXTI8:
		case EXTI9:
				NVIC_IRQ23_EXTI5_9_Disable();
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <Disable_NVIC+0xc4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a08      	ldr	r2, [pc, #32]	; (800072c <Disable_NVIC+0xc4>)
 800070c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000710:	6013      	str	r3, [r2, #0]
				break;
 8000712:	e006      	b.n	8000722 <Disable_NVIC+0xba>
		case EXTI11:
		case EXTI12:
		case EXTI13:
		case EXTI14:
		case EXTI15:
				NVIC_IRQ40_EXTI10_15_Disable();
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <Disable_NVIC+0xc8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a05      	ldr	r2, [pc, #20]	; (8000730 <Disable_NVIC+0xc8>)
 800071a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800071e:	6013      	str	r3, [r2, #0]
				break;
 8000720:	bf00      	nop
	}
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	e000e180 	.word	0xe000e180
 8000730:	e000e184 	.word	0xe000e184

08000734 <Update_EXTI>:
 * @return value 			   :- none
 * Note                        :- none
 *================================================================ */


void Update_EXTI(EXTI_PinConfig_t *EXTI_Config){
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

	uint8_t u8AFIO_EXTICR_Index , u8AFIO_EXTICR_Position ,u8Value=0;
 800073c:	2300      	movs	r3, #0
 800073e:	73fb      	strb	r3, [r7, #15]
	// Configure Pin as Floating input

		// declare config structure
	GPIO_PinConfig_t PinConfig;

	PinConfig.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_Pin;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	891b      	ldrh	r3, [r3, #8]
 8000744:	813b      	strh	r3, [r7, #8]
	PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000746:	2301      	movs	r3, #1
 8000748:	72bb      	strb	r3, [r7, #10]

		// pass config structure to MCAL_GPIO_Init
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &PinConfig);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	f107 0208 	add.w	r2, r7, #8
 8000752:	4611      	mov	r1, r2
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fa5c 	bl	8000c12 <MCAL_GPIO_Init>

	/********************************************************************/


	// Update PIN on AFIO as EXTI (using EXTICR[1:4] )
	u8AFIO_EXTICR_Index = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber)/4; // to get selected register  EXTICR[1:4]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	089b      	lsrs	r3, r3, #2
 8000760:	b29b      	uxth	r3, r3
 8000762:	73bb      	strb	r3, [r7, #14]
	u8AFIO_EXTICR_Position =  ((EXTI_Config->EXTI_PIN.EXTI_InputLineNumber)%4)*4;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	f003 0303 	and.w	r3, r3, #3
 800076e:	b2db      	uxtb	r3, r3
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	737b      	strb	r3, [r7, #13]
	u8Value = (GPIO_Maping_Position(EXTI_Config->EXTI_PIN.GPIO_Port) & 0xF);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	4a5f      	ldr	r2, [pc, #380]	; (80008f8 <Update_EXTI+0x1c4>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d016      	beq.n	80007ac <Update_EXTI+0x78>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	4a5e      	ldr	r2, [pc, #376]	; (80008fc <Update_EXTI+0x1c8>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d00f      	beq.n	80007a8 <Update_EXTI+0x74>
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	4a5c      	ldr	r2, [pc, #368]	; (8000900 <Update_EXTI+0x1cc>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d008      	beq.n	80007a4 <Update_EXTI+0x70>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	4a5b      	ldr	r2, [pc, #364]	; (8000904 <Update_EXTI+0x1d0>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d101      	bne.n	80007a0 <Update_EXTI+0x6c>
 800079c:	2303      	movs	r3, #3
 800079e:	e006      	b.n	80007ae <Update_EXTI+0x7a>
 80007a0:	2300      	movs	r3, #0
 80007a2:	e004      	b.n	80007ae <Update_EXTI+0x7a>
 80007a4:	2302      	movs	r3, #2
 80007a6:	e002      	b.n	80007ae <Update_EXTI+0x7a>
 80007a8:	2301      	movs	r3, #1
 80007aa:	e000      	b.n	80007ae <Update_EXTI+0x7a>
 80007ac:	2300      	movs	r3, #0
 80007ae:	73fb      	strb	r3, [r7, #15]

		//clear AFIO 4Bits (specified for pin which we need to update)

	AFIO->EXTICR[u8AFIO_EXTICR_Index] &= ~(0xF << u8AFIO_EXTICR_Position);
 80007b0:	4a55      	ldr	r2, [pc, #340]	; (8000908 <Update_EXTI+0x1d4>)
 80007b2:	7bbb      	ldrb	r3, [r7, #14]
 80007b4:	3302      	adds	r3, #2
 80007b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007ba:	7b7b      	ldrb	r3, [r7, #13]
 80007bc:	210f      	movs	r1, #15
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	43db      	mvns	r3, r3
 80007c4:	4618      	mov	r0, r3
 80007c6:	4950      	ldr	r1, [pc, #320]	; (8000908 <Update_EXTI+0x1d4>)
 80007c8:	7bbb      	ldrb	r3, [r7, #14]
 80007ca:	4002      	ands	r2, r0
 80007cc:	3302      	adds	r3, #2
 80007ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		// Set Value to AFIO_EXTIXR[1:4] registers
	AFIO->EXTICR[u8AFIO_EXTICR_Index] |=(u8Value << u8AFIO_EXTICR_Position);
 80007d2:	4a4d      	ldr	r2, [pc, #308]	; (8000908 <Update_EXTI+0x1d4>)
 80007d4:	7bbb      	ldrb	r3, [r7, #14]
 80007d6:	3302      	adds	r3, #2
 80007d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007dc:	7bf9      	ldrb	r1, [r7, #15]
 80007de:	7b7b      	ldrb	r3, [r7, #13]
 80007e0:	fa01 f303 	lsl.w	r3, r1, r3
 80007e4:	4618      	mov	r0, r3
 80007e6:	4948      	ldr	r1, [pc, #288]	; (8000908 <Update_EXTI+0x1d4>)
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	4302      	orrs	r2, r0
 80007ec:	3302      	adds	r3, #2
 80007ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/********************************************************************/


	// Configure the Trigger Selection bits of the Interrupt lines (EXTI_RTSR and EXTI_FTSR)
	// Clear the Two bits of registers
	EXTI->RTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80007f2:	4b46      	ldr	r3, [pc, #280]	; (800090c <Update_EXTI+0x1d8>)
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	8812      	ldrh	r2, [r2, #0]
 80007fa:	4611      	mov	r1, r2
 80007fc:	2201      	movs	r2, #1
 80007fe:	408a      	lsls	r2, r1
 8000800:	43d2      	mvns	r2, r2
 8000802:	4611      	mov	r1, r2
 8000804:	4a41      	ldr	r2, [pc, #260]	; (800090c <Update_EXTI+0x1d8>)
 8000806:	400b      	ands	r3, r1
 8000808:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800080a:	4b40      	ldr	r3, [pc, #256]	; (800090c <Update_EXTI+0x1d8>)
 800080c:	68db      	ldr	r3, [r3, #12]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	8812      	ldrh	r2, [r2, #0]
 8000812:	4611      	mov	r1, r2
 8000814:	2201      	movs	r2, #1
 8000816:	408a      	lsls	r2, r1
 8000818:	43d2      	mvns	r2, r2
 800081a:	4611      	mov	r1, r2
 800081c:	4a3b      	ldr	r2, [pc, #236]	; (800090c <Update_EXTI+0x1d8>)
 800081e:	400b      	ands	r3, r1
 8000820:	60d3      	str	r3, [r2, #12]

	switch(EXTI_Config->Trigger_Case){
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	7b1b      	ldrb	r3, [r3, #12]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d010      	beq.n	800084c <Update_EXTI+0x118>
 800082a:	2b02      	cmp	r3, #2
 800082c:	d01a      	beq.n	8000864 <Update_EXTI+0x130>
 800082e:	2b00      	cmp	r3, #0
 8000830:	d000      	beq.n	8000834 <Update_EXTI+0x100>
		case(EXTI_Trigger_RISINGAndFALLING):
						EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
						EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
						break;
		default:
						break;
 8000832:	e02e      	b.n	8000892 <Update_EXTI+0x15e>
						EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000834:	4b35      	ldr	r3, [pc, #212]	; (800090c <Update_EXTI+0x1d8>)
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	8812      	ldrh	r2, [r2, #0]
 800083c:	4611      	mov	r1, r2
 800083e:	2201      	movs	r2, #1
 8000840:	408a      	lsls	r2, r1
 8000842:	4611      	mov	r1, r2
 8000844:	4a31      	ldr	r2, [pc, #196]	; (800090c <Update_EXTI+0x1d8>)
 8000846:	430b      	orrs	r3, r1
 8000848:	6093      	str	r3, [r2, #8]
						break;
 800084a:	e022      	b.n	8000892 <Update_EXTI+0x15e>
						EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800084c:	4b2f      	ldr	r3, [pc, #188]	; (800090c <Update_EXTI+0x1d8>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	8812      	ldrh	r2, [r2, #0]
 8000854:	4611      	mov	r1, r2
 8000856:	2201      	movs	r2, #1
 8000858:	408a      	lsls	r2, r1
 800085a:	4611      	mov	r1, r2
 800085c:	4a2b      	ldr	r2, [pc, #172]	; (800090c <Update_EXTI+0x1d8>)
 800085e:	430b      	orrs	r3, r1
 8000860:	60d3      	str	r3, [r2, #12]
						break;
 8000862:	e016      	b.n	8000892 <Update_EXTI+0x15e>
						EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000864:	4b29      	ldr	r3, [pc, #164]	; (800090c <Update_EXTI+0x1d8>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	8812      	ldrh	r2, [r2, #0]
 800086c:	4611      	mov	r1, r2
 800086e:	2201      	movs	r2, #1
 8000870:	408a      	lsls	r2, r1
 8000872:	4611      	mov	r1, r2
 8000874:	4a25      	ldr	r2, [pc, #148]	; (800090c <Update_EXTI+0x1d8>)
 8000876:	430b      	orrs	r3, r1
 8000878:	6093      	str	r3, [r2, #8]
						EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800087a:	4b24      	ldr	r3, [pc, #144]	; (800090c <Update_EXTI+0x1d8>)
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	8812      	ldrh	r2, [r2, #0]
 8000882:	4611      	mov	r1, r2
 8000884:	2201      	movs	r2, #1
 8000886:	408a      	lsls	r2, r1
 8000888:	4611      	mov	r1, r2
 800088a:	4a20      	ldr	r2, [pc, #128]	; (800090c <Update_EXTI+0x1d8>)
 800088c:	430b      	orrs	r3, r1
 800088e:	60d3      	str	r3, [r2, #12]
						break;
 8000890:	bf00      	nop
	}

	/********************************************************************/

	// Update Function CallBack
	GPtr_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->Ptr_IRQ_CallBack;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	4619      	mov	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	691b      	ldr	r3, [r3, #16]
 800089c:	4a1c      	ldr	r2, [pc, #112]	; (8000910 <Update_EXTI+0x1dc>)
 800089e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	/********************************************************************/

	// Enable IRQ

	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable){
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	7b5b      	ldrb	r3, [r3, #13]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d110      	bne.n	80008cc <Update_EXTI+0x198>
		//Configure the mask bits of the 20 Interrupt lines (EXTI_IMR)
		EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <Update_EXTI+0x1d8>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	8812      	ldrh	r2, [r2, #0]
 80008b2:	4611      	mov	r1, r2
 80008b4:	2201      	movs	r2, #1
 80008b6:	408a      	lsls	r2, r1
 80008b8:	4611      	mov	r1, r2
 80008ba:	4a14      	ldr	r2, [pc, #80]	; (800090c <Update_EXTI+0x1d8>)
 80008bc:	430b      	orrs	r3, r1
 80008be:	6013      	str	r3, [r2, #0]
		//Configure the enable and mask bits that control the NVIC IRQ channel

		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fe69 	bl	800059c <Enable_NVIC>
		//Configure the enable and mask bits that control the NVIC IRQ channel
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}


}
 80008ca:	e010      	b.n	80008ee <Update_EXTI+0x1ba>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <Update_EXTI+0x1d8>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	8812      	ldrh	r2, [r2, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	2201      	movs	r2, #1
 80008d8:	408a      	lsls	r2, r1
 80008da:	43d2      	mvns	r2, r2
 80008dc:	4611      	mov	r1, r2
 80008de:	4a0b      	ldr	r2, [pc, #44]	; (800090c <Update_EXTI+0x1d8>)
 80008e0:	400b      	ands	r3, r1
 80008e2:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff febd 	bl	8000668 <Disable_NVIC>
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40010800 	.word	0x40010800
 80008fc:	40010c00 	.word	0x40010c00
 8000900:	40011000 	.word	0x40011000
 8000904:	40011400 	.word	0x40011400
 8000908:	40010000 	.word	0x40010000
 800090c:	40010400 	.word	0x40010400
 8000910:	20000034 	.word	0x20000034

08000914 <MCAL_EXTI_GPIO_Init>:
 * @return value 			   :- none
 * Note                        :- none
 *================================================================ */


void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t  *EXTI_Config){
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff ff09 	bl	8000734 <Update_EXTI>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <EXTI0_IRQHandler>:

//======================================================
// EXTI IRQ Handlers Implementation
//======================================================

void EXTI0_IRQHandler(void){
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	// Clear register to avoid infinite loop in INT
	EXTI->PR |= (1<<EXTI0);
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <EXTI0_IRQHandler+0x1c>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <EXTI0_IRQHandler+0x1c>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	6153      	str	r3, [r2, #20]
	// Call Function of callback
	GPtr_IRQ_CallBack[EXTI0]();
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <EXTI0_IRQHandler+0x20>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4798      	blx	r3



}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40010400 	.word	0x40010400
 800094c:	20000034 	.word	0x20000034

08000950 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	// Clear register to avoid infinite loop in INT
	EXTI->PR |= (1<<EXTI1);
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <EXTI1_IRQHandler+0x1c>)
 8000956:	695b      	ldr	r3, [r3, #20]
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <EXTI1_IRQHandler+0x1c>)
 800095a:	f043 0302 	orr.w	r3, r3, #2
 800095e:	6153      	str	r3, [r2, #20]

	// Call Function of callback
	GPtr_IRQ_CallBack[EXTI1]();
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <EXTI1_IRQHandler+0x20>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	4798      	blx	r3

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40010400 	.word	0x40010400
 8000970:	20000034 	.word	0x20000034

08000974 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	// Clear register to avoid infinite loop in INT
	EXTI->PR |= (1<<EXTI2);
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <EXTI2_IRQHandler+0x1c>)
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <EXTI2_IRQHandler+0x1c>)
 800097e:	f043 0304 	orr.w	r3, r3, #4
 8000982:	6153      	str	r3, [r2, #20]

	// Call Function of callback
	GPtr_IRQ_CallBack[EXTI2]();
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <EXTI2_IRQHandler+0x20>)
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	4798      	blx	r3
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40010400 	.word	0x40010400
 8000994:	20000034 	.word	0x20000034

08000998 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	// Clear register to avoid infinite loop in INT
	EXTI->PR |= (1<<EXTI3);
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <EXTI3_IRQHandler+0x1c>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <EXTI3_IRQHandler+0x1c>)
 80009a2:	f043 0308 	orr.w	r3, r3, #8
 80009a6:	6153      	str	r3, [r2, #20]

	// Call Function of callback
	GPtr_IRQ_CallBack[EXTI3]();
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <EXTI3_IRQHandler+0x20>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	4798      	blx	r3
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40010400 	.word	0x40010400
 80009b8:	20000034 	.word	0x20000034

080009bc <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	// Clear register to avoid infinite loop in INT
	EXTI->PR |= (1<<EXTI4);
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <EXTI4_IRQHandler+0x1c>)
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <EXTI4_IRQHandler+0x1c>)
 80009c6:	f043 0310 	orr.w	r3, r3, #16
 80009ca:	6153      	str	r3, [r2, #20]

	// Call Function of callback
	GPtr_IRQ_CallBack[EXTI4]();
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <EXTI4_IRQHandler+0x20>)
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	4798      	blx	r3
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40010400 	.word	0x40010400
 80009dc:	20000034 	.word	0x20000034

080009e0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	// determine the ISR Number from 9 to 5
	if(EXTI->PR & (1<<EXTI5)){EXTI->PR |= (1<<EXTI5);	GPtr_IRQ_CallBack[EXTI5]();}
 80009e4:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <EXTI9_5_IRQHandler+0xa0>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	f003 0320 	and.w	r3, r3, #32
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d008      	beq.n	8000a02 <EXTI9_5_IRQHandler+0x22>
 80009f0:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <EXTI9_5_IRQHandler+0xa0>)
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	4a22      	ldr	r2, [pc, #136]	; (8000a80 <EXTI9_5_IRQHandler+0xa0>)
 80009f6:	f043 0320 	orr.w	r3, r3, #32
 80009fa:	6153      	str	r3, [r2, #20]
 80009fc:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <EXTI9_5_IRQHandler+0xa4>)
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	4798      	blx	r3
	if(EXTI->PR & (1<<EXTI6)){EXTI->PR |= (1<<EXTI6);	GPtr_IRQ_CallBack[EXTI6]();}
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <EXTI9_5_IRQHandler+0xa0>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d008      	beq.n	8000a20 <EXTI9_5_IRQHandler+0x40>
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <EXTI9_5_IRQHandler+0xa0>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <EXTI9_5_IRQHandler+0xa0>)
 8000a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a18:	6153      	str	r3, [r2, #20]
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <EXTI9_5_IRQHandler+0xa4>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4798      	blx	r3
	if(EXTI->PR & (1<<EXTI7)){EXTI->PR |= (1<<EXTI7);	GPtr_IRQ_CallBack[EXTI7]();}
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <EXTI9_5_IRQHandler+0xa0>)
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d008      	beq.n	8000a3e <EXTI9_5_IRQHandler+0x5e>
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <EXTI9_5_IRQHandler+0xa0>)
 8000a2e:	695b      	ldr	r3, [r3, #20]
 8000a30:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <EXTI9_5_IRQHandler+0xa0>)
 8000a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a36:	6153      	str	r3, [r2, #20]
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <EXTI9_5_IRQHandler+0xa4>)
 8000a3a:	69db      	ldr	r3, [r3, #28]
 8000a3c:	4798      	blx	r3
	if(EXTI->PR & (1<<EXTI8)){EXTI->PR |= (1<<EXTI8);	GPtr_IRQ_CallBack[EXTI8]();}
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <EXTI9_5_IRQHandler+0xa0>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d008      	beq.n	8000a5c <EXTI9_5_IRQHandler+0x7c>
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <EXTI9_5_IRQHandler+0xa0>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <EXTI9_5_IRQHandler+0xa0>)
 8000a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a54:	6153      	str	r3, [r2, #20]
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <EXTI9_5_IRQHandler+0xa4>)
 8000a58:	6a1b      	ldr	r3, [r3, #32]
 8000a5a:	4798      	blx	r3
	if(EXTI->PR & (1<<EXTI9)){EXTI->PR |= (1<<EXTI9);	GPtr_IRQ_CallBack[EXTI9]();}
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <EXTI9_5_IRQHandler+0xa0>)
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d008      	beq.n	8000a7a <EXTI9_5_IRQHandler+0x9a>
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <EXTI9_5_IRQHandler+0xa0>)
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <EXTI9_5_IRQHandler+0xa0>)
 8000a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a72:	6153      	str	r3, [r2, #20]
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <EXTI9_5_IRQHandler+0xa4>)
 8000a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a78:	4798      	blx	r3
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40010400 	.word	0x40010400
 8000a84:	20000034 	.word	0x20000034

08000a88 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	// determine the ISR Number from 15 to 10
	if(EXTI->PR & (1<<EXTI10)){EXTI->PR |= (1<<EXTI10);	GPtr_IRQ_CallBack[EXTI10]();}
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <EXTI15_10_IRQHandler+0xbc>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d008      	beq.n	8000aaa <EXTI15_10_IRQHandler+0x22>
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <EXTI15_10_IRQHandler+0xbc>)
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	4a29      	ldr	r2, [pc, #164]	; (8000b44 <EXTI15_10_IRQHandler+0xbc>)
 8000a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa2:	6153      	str	r3, [r2, #20]
 8000aa4:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <EXTI15_10_IRQHandler+0xc0>)
 8000aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa8:	4798      	blx	r3
	if(EXTI->PR & (1<<EXTI11)){EXTI->PR |= (1<<EXTI11);	GPtr_IRQ_CallBack[EXTI11]();}
 8000aaa:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <EXTI15_10_IRQHandler+0xbc>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d008      	beq.n	8000ac8 <EXTI15_10_IRQHandler+0x40>
 8000ab6:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <EXTI15_10_IRQHandler+0xbc>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	4a22      	ldr	r2, [pc, #136]	; (8000b44 <EXTI15_10_IRQHandler+0xbc>)
 8000abc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ac0:	6153      	str	r3, [r2, #20]
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <EXTI15_10_IRQHandler+0xc0>)
 8000ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac6:	4798      	blx	r3
	if(EXTI->PR & (1<<EXTI12)){EXTI->PR |= (1<<EXTI12);	GPtr_IRQ_CallBack[EXTI12]();}
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <EXTI15_10_IRQHandler+0xbc>)
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d008      	beq.n	8000ae6 <EXTI15_10_IRQHandler+0x5e>
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <EXTI15_10_IRQHandler+0xbc>)
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	4a1a      	ldr	r2, [pc, #104]	; (8000b44 <EXTI15_10_IRQHandler+0xbc>)
 8000ada:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ade:	6153      	str	r3, [r2, #20]
 8000ae0:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <EXTI15_10_IRQHandler+0xc0>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	4798      	blx	r3
	if(EXTI->PR & (1<<EXTI13)){EXTI->PR |= (1<<EXTI13);	GPtr_IRQ_CallBack[EXTI13]();}
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <EXTI15_10_IRQHandler+0xbc>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d008      	beq.n	8000b04 <EXTI15_10_IRQHandler+0x7c>
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <EXTI15_10_IRQHandler+0xbc>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <EXTI15_10_IRQHandler+0xbc>)
 8000af8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000afc:	6153      	str	r3, [r2, #20]
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <EXTI15_10_IRQHandler+0xc0>)
 8000b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b02:	4798      	blx	r3
	if(EXTI->PR & (1<<EXTI14)){EXTI->PR |= (1<<EXTI14);	GPtr_IRQ_CallBack[EXTI14]();}
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <EXTI15_10_IRQHandler+0xbc>)
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d008      	beq.n	8000b22 <EXTI15_10_IRQHandler+0x9a>
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <EXTI15_10_IRQHandler+0xbc>)
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <EXTI15_10_IRQHandler+0xbc>)
 8000b16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1a:	6153      	str	r3, [r2, #20]
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <EXTI15_10_IRQHandler+0xc0>)
 8000b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b20:	4798      	blx	r3
	if(EXTI->PR & (1<<EXTI15)){EXTI->PR |= (1<<EXTI15);	GPtr_IRQ_CallBack[EXTI15]();}
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <EXTI15_10_IRQHandler+0xbc>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d008      	beq.n	8000b40 <EXTI15_10_IRQHandler+0xb8>
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <EXTI15_10_IRQHandler+0xbc>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <EXTI15_10_IRQHandler+0xbc>)
 8000b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b38:	6153      	str	r3, [r2, #20]
 8000b3a:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <EXTI15_10_IRQHandler+0xc0>)
 8000b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b3e:	4798      	blx	r3
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40010400 	.word	0x40010400
 8000b48:	20000034 	.word	0x20000034

08000b4c <GetPinPosition>:
#include "../Inc/stm32f103c6_GPIO_Driver.h"




uint8_t GetPinPosition(uint16_t PinNumber){
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]

	switch(PinNumber){
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	2b80      	cmp	r3, #128	; 0x80
 8000b5a:	d042      	beq.n	8000be2 <GetPinPosition+0x96>
 8000b5c:	2b80      	cmp	r3, #128	; 0x80
 8000b5e:	dc11      	bgt.n	8000b84 <GetPinPosition+0x38>
 8000b60:	2b08      	cmp	r3, #8
 8000b62:	d036      	beq.n	8000bd2 <GetPinPosition+0x86>
 8000b64:	2b08      	cmp	r3, #8
 8000b66:	dc06      	bgt.n	8000b76 <GetPinPosition+0x2a>
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d02e      	beq.n	8000bca <GetPinPosition+0x7e>
 8000b6c:	2b04      	cmp	r3, #4
 8000b6e:	d02e      	beq.n	8000bce <GetPinPosition+0x82>
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d028      	beq.n	8000bc6 <GetPinPosition+0x7a>
 8000b74:	e047      	b.n	8000c06 <GetPinPosition+0xba>
 8000b76:	2b20      	cmp	r3, #32
 8000b78:	d02f      	beq.n	8000bda <GetPinPosition+0x8e>
 8000b7a:	2b40      	cmp	r3, #64	; 0x40
 8000b7c:	d02f      	beq.n	8000bde <GetPinPosition+0x92>
 8000b7e:	2b10      	cmp	r3, #16
 8000b80:	d029      	beq.n	8000bd6 <GetPinPosition+0x8a>
 8000b82:	e040      	b.n	8000c06 <GetPinPosition+0xba>
 8000b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b88:	d033      	beq.n	8000bf2 <GetPinPosition+0xa6>
 8000b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b8e:	dc09      	bgt.n	8000ba4 <GetPinPosition+0x58>
 8000b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b94:	d029      	beq.n	8000bea <GetPinPosition+0x9e>
 8000b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b9a:	d028      	beq.n	8000bee <GetPinPosition+0xa2>
 8000b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ba0:	d021      	beq.n	8000be6 <GetPinPosition+0x9a>
 8000ba2:	e030      	b.n	8000c06 <GetPinPosition+0xba>
 8000ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ba8:	d027      	beq.n	8000bfa <GetPinPosition+0xae>
 8000baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bae:	dc03      	bgt.n	8000bb8 <GetPinPosition+0x6c>
 8000bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bb4:	d01f      	beq.n	8000bf6 <GetPinPosition+0xaa>
 8000bb6:	e026      	b.n	8000c06 <GetPinPosition+0xba>
 8000bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bbc:	d01f      	beq.n	8000bfe <GetPinPosition+0xb2>
 8000bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bc2:	d01e      	beq.n	8000c02 <GetPinPosition+0xb6>
 8000bc4:	e01f      	b.n	8000c06 <GetPinPosition+0xba>
	case GPIO_PIN_0 :
		return 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e01e      	b.n	8000c08 <GetPinPosition+0xbc>
		break;
	case GPIO_PIN_1 :
		return 4;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	e01c      	b.n	8000c08 <GetPinPosition+0xbc>
		break;
	case GPIO_PIN_2 :
		return 8;
 8000bce:	2308      	movs	r3, #8
 8000bd0:	e01a      	b.n	8000c08 <GetPinPosition+0xbc>
		break;
	case GPIO_PIN_3 :
		return 12;
 8000bd2:	230c      	movs	r3, #12
 8000bd4:	e018      	b.n	8000c08 <GetPinPosition+0xbc>
		break;
	case GPIO_PIN_4 :
		return 16;
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	e016      	b.n	8000c08 <GetPinPosition+0xbc>
		break;
	case GPIO_PIN_5 :
		return 20;
 8000bda:	2314      	movs	r3, #20
 8000bdc:	e014      	b.n	8000c08 <GetPinPosition+0xbc>
		break;
	case GPIO_PIN_6 :
		return 24;
 8000bde:	2318      	movs	r3, #24
 8000be0:	e012      	b.n	8000c08 <GetPinPosition+0xbc>
		break;
	case GPIO_PIN_7 :
		return 28;
 8000be2:	231c      	movs	r3, #28
 8000be4:	e010      	b.n	8000c08 <GetPinPosition+0xbc>
		break;
	case GPIO_PIN_8 :
		return 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e00e      	b.n	8000c08 <GetPinPosition+0xbc>
		break;
	case GPIO_PIN_9 :
		return 4;
 8000bea:	2304      	movs	r3, #4
 8000bec:	e00c      	b.n	8000c08 <GetPinPosition+0xbc>
		break;
	case GPIO_PIN_10 :
		return 8;
 8000bee:	2308      	movs	r3, #8
 8000bf0:	e00a      	b.n	8000c08 <GetPinPosition+0xbc>
		break;
	case GPIO_PIN_11 :
		return 12;
 8000bf2:	230c      	movs	r3, #12
 8000bf4:	e008      	b.n	8000c08 <GetPinPosition+0xbc>
		break;
	case GPIO_PIN_12 :
		return 16;
 8000bf6:	2310      	movs	r3, #16
 8000bf8:	e006      	b.n	8000c08 <GetPinPosition+0xbc>
		break;
	case GPIO_PIN_13 :
		return 20;
 8000bfa:	2314      	movs	r3, #20
 8000bfc:	e004      	b.n	8000c08 <GetPinPosition+0xbc>
		break;
	case GPIO_PIN_14 :
		return 24;
 8000bfe:	2318      	movs	r3, #24
 8000c00:	e002      	b.n	8000c08 <GetPinPosition+0xbc>
		break;
	case GPIO_PIN_15 :
		return 28;
 8000c02:	231c      	movs	r3, #28
 8000c04:	e000      	b.n	8000c08 <GetPinPosition+0xbc>
		break;
	default:
		return 0;
 8000c06:	2300      	movs	r3, #0
	}
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr

08000c12 <MCAL_GPIO_Init>:
 * @Parameter [in] 	:- GPIOx represents selected GPIO it can be [A:E]
 * @Parameter [in] 	:-
 * @return value     :- State of Function OK if run successfully or NOK if failed.
 * Note			    :-None
 */
status_t MCAL_GPIO_Init(GPIO_t *GPIOx , GPIO_PinConfig_t* PinConfig){
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]

	//variable used
	volatile uint32_t *Ptr_ConfigRegister = NULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	613b      	str	r3, [r7, #16]
	uint8_t  u8PinPosition = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]
	uint8_t  u8PinConfig_Value = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	75fb      	strb	r3, [r7, #23]
	// determine which register will be written CRL For [0:7] and CRH for [8:15]
	Ptr_ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	2bff      	cmp	r3, #255	; 0xff
 8000c2e:	d801      	bhi.n	8000c34 <MCAL_GPIO_Init+0x22>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	e001      	b.n	8000c38 <MCAL_GPIO_Init+0x26>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3304      	adds	r3, #4
 8000c38:	613b      	str	r3, [r7, #16]
	// determine the position of the pin in the register
	u8PinPosition = GetPinPosition(PinConfig->GPIO_PinNumber);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ff84 	bl	8000b4c <GetPinPosition>
 8000c44:	4603      	mov	r3, r0
 8000c46:	73fb      	strb	r3, [r7, #15]


	// clear Pin before config it again
	*Ptr_ConfigRegister &= ~(0xF << u8PinPosition);
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	210f      	movs	r1, #15
 8000c50:	fa01 f202 	lsl.w	r2, r1, r2
 8000c54:	43d2      	mvns	r2, r2
 8000c56:	401a      	ands	r2, r3
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	601a      	str	r2, [r3, #0]
	// check if the pin output or not
	if((PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD)|(PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP)|(PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD)|(PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP)){
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	789b      	ldrb	r3, [r3, #2]
 8000c60:	2b05      	cmp	r3, #5
 8000c62:	bf0c      	ite	eq
 8000c64:	2301      	moveq	r3, #1
 8000c66:	2300      	movne	r3, #0
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	789b      	ldrb	r3, [r3, #2]
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf0c      	ite	eq
 8000c72:	2301      	moveq	r3, #1
 8000c74:	2300      	movne	r3, #0
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	789b      	ldrb	r3, [r3, #2]
 8000c82:	2b07      	cmp	r3, #7
 8000c84:	bf0c      	ite	eq
 8000c86:	2301      	moveq	r3, #1
 8000c88:	2300      	movne	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	7892      	ldrb	r2, [r2, #2]
 8000c92:	2a06      	cmp	r2, #6
 8000c94:	bf0c      	ite	eq
 8000c96:	2201      	moveq	r2, #1
 8000c98:	2200      	movne	r2, #0
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d00e      	beq.n	8000cc0 <MCAL_GPIO_Init+0xae>

		// Set CNFy and MODEy according to Configuration structure
		u8PinConfig_Value = ((((PinConfig->GPIO_Mode - 4) << 2)|(PinConfig->GPIO_OUTPUT_Speed))&0x0F);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	789b      	ldrb	r3, [r3, #2]
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	b25a      	sxtb	r2, r3
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	78db      	ldrb	r3, [r3, #3]
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	b25b      	sxtb	r3, r3
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	f003 030f 	and.w	r3, r3, #15
 8000cbc:	75fb      	strb	r3, [r7, #23]
 8000cbe:	e02a      	b.n	8000d16 <MCAL_GPIO_Init+0x104>

	}else{
		// here pin is input
		if((PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)){
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	789b      	ldrb	r3, [r3, #2]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d109      	bne.n	8000cdc <MCAL_GPIO_Init+0xca>

			u8PinConfig_Value = (((GPIO_MODE_INPUT_PU)<<2) & 0x0F);
 8000cc8:	2308      	movs	r3, #8
 8000cca:	75fb      	strb	r3, [r7, #23]
			//according to Table 20. Port bit configuration table in  PU ODRx must be written to one
			GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	8812      	ldrh	r2, [r2, #0]
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	e01c      	b.n	8000d16 <MCAL_GPIO_Init+0x104>


		}else if((PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PD)){
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	789b      	ldrb	r3, [r3, #2]
 8000ce0:	2b03      	cmp	r3, #3
 8000ce2:	d10a      	bne.n	8000cfa <MCAL_GPIO_Init+0xe8>
			//
			u8PinConfig_Value = (((GPIO_MODE_INPUT_PU)<<2) & 0x0F);
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	75fb      	strb	r3, [r7, #23]
			//according to Table 20. Port bit configuration table in  PU ODRx must be written to zero(0)
			GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	8812      	ldrh	r2, [r2, #0]
 8000cf0:	43d2      	mvns	r2, r2
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	e00d      	b.n	8000d16 <MCAL_GPIO_Init+0x104>

		}else if((PinConfig->GPIO_Mode == GPIO_MODE_INPUT_AF)){
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	789b      	ldrb	r3, [r3, #2]
 8000cfe:	2b08      	cmp	r3, #8
 8000d00:	d102      	bne.n	8000d08 <MCAL_GPIO_Init+0xf6>

			u8PinConfig_Value = (((GPIO_MODE_INPUT_FLO)<<2) & 0x0F);
 8000d02:	2304      	movs	r3, #4
 8000d04:	75fb      	strb	r3, [r7, #23]
 8000d06:	e006      	b.n	8000d16 <MCAL_GPIO_Init+0x104>

		}else{

			u8PinConfig_Value = (((PinConfig->GPIO_Mode)<<2) & 0x0F);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	789b      	ldrb	r3, [r3, #2]
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	f003 030f 	and.w	r3, r3, #15
 8000d14:	75fb      	strb	r3, [r7, #23]

		}

	}

	*Ptr_ConfigRegister |= (u8PinConfig_Value << u8PinPosition);
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	7df9      	ldrb	r1, [r7, #23]
 8000d1c:	7bfa      	ldrb	r2, [r7, #15]
 8000d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d22:	431a      	orrs	r2, r3
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	601a      	str	r2, [r3, #0]

	return OK;
 8000d28:	2301      	movs	r3, #1


}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <MCAL_GPIO_WritePin>:
 * @Parameter [in] 	:- GPIOx represents selected GPIO it can be [A:E]
 * @Parameter [in] 	:-
 * @return value     :- State of Function OK if run successfully or NOK if failed.
 * Note			    :-None
 */
status_t  MCAL_GPIO_WritePin(GPIO_t *GPIOx , uint16_t PinNumber , uint8_t u8Value){
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	807b      	strh	r3, [r7, #2]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	707b      	strb	r3, [r7, #1]

	if(u8Value == GPIO_PIN_SET){
 8000d42:	787b      	ldrb	r3, [r7, #1]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d103      	bne.n	8000d50 <MCAL_GPIO_WritePin+0x1e>

		// GPIOx->ODR |= (PinNumber);
		// or for less instructions

		GPIOx->BSRR = (uint32_t)PinNumber;
 8000d48:	887a      	ldrh	r2, [r7, #2]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	611a      	str	r2, [r3, #16]
 8000d4e:	e005      	b.n	8000d5c <MCAL_GPIO_WritePin+0x2a>

	}else if(u8Value == GPIO_PIN_RESET){
 8000d50:	787b      	ldrb	r3, [r7, #1]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d102      	bne.n	8000d5c <MCAL_GPIO_WritePin+0x2a>

		// GPIOx->ODR &= ~(PinNumber);

		GPIOx->BRR = (uint32_t)PinNumber;
 8000d56:	887a      	ldrh	r2, [r7, #2]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	615a      	str	r2, [r3, #20]
	}

	return OK;
 8000d5c:	2301      	movs	r3, #1
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <MCAL_GPIO_WritePort>:
 * @Parameter [in] 	:- GPIOx represents selected GPIO it can be [A:E]
 * @Parameter [in] 	:-
 * @return value     :- State of Function OK if run successfully or NOK if failed.
 * Note			    :-None
 */
status_t  MCAL_GPIO_WritePort(GPIO_t *GPIOx , uint16_t u16Value){
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	807b      	strh	r3, [r7, #2]

	GPIOx->ODR = (uint32_t) u16Value;
 8000d74:	887a      	ldrh	r2, [r7, #2]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	60da      	str	r2, [r3, #12]

	return OK;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
	...

08000d88 <__libc_init_array>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	2500      	movs	r5, #0
 8000d8c:	4e0c      	ldr	r6, [pc, #48]	; (8000dc0 <__libc_init_array+0x38>)
 8000d8e:	4c0d      	ldr	r4, [pc, #52]	; (8000dc4 <__libc_init_array+0x3c>)
 8000d90:	1ba4      	subs	r4, r4, r6
 8000d92:	10a4      	asrs	r4, r4, #2
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	d109      	bne.n	8000dac <__libc_init_array+0x24>
 8000d98:	f000 f81a 	bl	8000dd0 <_init>
 8000d9c:	2500      	movs	r5, #0
 8000d9e:	4e0a      	ldr	r6, [pc, #40]	; (8000dc8 <__libc_init_array+0x40>)
 8000da0:	4c0a      	ldr	r4, [pc, #40]	; (8000dcc <__libc_init_array+0x44>)
 8000da2:	1ba4      	subs	r4, r4, r6
 8000da4:	10a4      	asrs	r4, r4, #2
 8000da6:	42a5      	cmp	r5, r4
 8000da8:	d105      	bne.n	8000db6 <__libc_init_array+0x2e>
 8000daa:	bd70      	pop	{r4, r5, r6, pc}
 8000dac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000db0:	4798      	blx	r3
 8000db2:	3501      	adds	r5, #1
 8000db4:	e7ee      	b.n	8000d94 <__libc_init_array+0xc>
 8000db6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dba:	4798      	blx	r3
 8000dbc:	3501      	adds	r5, #1
 8000dbe:	e7f2      	b.n	8000da6 <__libc_init_array+0x1e>
 8000dc0:	08000e10 	.word	0x08000e10
 8000dc4:	08000e10 	.word	0x08000e10
 8000dc8:	08000e10 	.word	0x08000e10
 8000dcc:	08000e14 	.word	0x08000e14

08000dd0 <_init>:
 8000dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dd2:	bf00      	nop
 8000dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dd6:	bc08      	pop	{r3}
 8000dd8:	469e      	mov	lr, r3
 8000dda:	4770      	bx	lr

08000ddc <_fini>:
 8000ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dde:	bf00      	nop
 8000de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de2:	bc08      	pop	{r3}
 8000de4:	469e      	mov	lr, r3
 8000de6:	4770      	bx	lr
