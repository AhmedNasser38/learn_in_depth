
toggle_8Leds_onebyone.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000031e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000031e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000059f  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000051b  00000000  00000000  0000094b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000365  00000000  00000000  00000e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000011cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032f  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000151f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
int main(void)
{
    /* Replace with your application code */
	int8 i;
	// Set pin0 in DDRB as INPUT
	ClearBit(DDRB,PIN0);
  7c:	87 b3       	in	r24, 0x17	; 23
  7e:	8e 7f       	andi	r24, 0xFE	; 254
  80:	87 bb       	out	0x17, r24	; 23
	// Set all pins in PORTA as OUTPUT
	SetBit(DDRA,PIN0);
  82:	8a b3       	in	r24, 0x1a	; 26
  84:	81 60       	ori	r24, 0x01	; 1
  86:	8a bb       	out	0x1a, r24	; 26
	SetBit(DDRA,PIN1);
  88:	8a b3       	in	r24, 0x1a	; 26
  8a:	82 60       	ori	r24, 0x02	; 2
  8c:	8a bb       	out	0x1a, r24	; 26
	SetBit(DDRA,PIN2);
  8e:	8a b3       	in	r24, 0x1a	; 26
  90:	84 60       	ori	r24, 0x04	; 4
  92:	8a bb       	out	0x1a, r24	; 26
	SetBit(DDRA,PIN3);
  94:	8a b3       	in	r24, 0x1a	; 26
  96:	88 60       	ori	r24, 0x08	; 8
  98:	8a bb       	out	0x1a, r24	; 26
	SetBit(DDRA,PIN4);
  9a:	8a b3       	in	r24, 0x1a	; 26
  9c:	80 61       	ori	r24, 0x10	; 16
  9e:	8a bb       	out	0x1a, r24	; 26
	SetBit(DDRA,PIN5);
  a0:	8a b3       	in	r24, 0x1a	; 26
  a2:	80 62       	ori	r24, 0x20	; 32
  a4:	8a bb       	out	0x1a, r24	; 26
	SetBit(DDRA,PIN6);
  a6:	8a b3       	in	r24, 0x1a	; 26
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	8a bb       	out	0x1a, r24	; 26
	SetBit(DDRA,PIN7);
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	8a bb       	out	0x1a, r24	; 26
	// or //PORTA=0xFF;
	// init pin0 in portb
	//ClearBit(PORTB,PIN0);
    while (1) 
    {
		if(GetBit(PINB,PIN0) == 1){
  b2:	b0 9b       	sbis	0x16, 0	; 22
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <main+0x36>
			// ON LED1 
			SetBit(PORTA,PIN0);
  b6:	8b b3       	in	r24, 0x1b	; 27
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	8b bb       	out	0x1b, r24	; 27
			Delay_ms(900);
  bc:	80 e3       	ldi	r24, 0x30	; 48
  be:	95 e7       	ldi	r25, 0x75	; 117
  c0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  c8:	06 c0       	rjmp	.+12     	; 0xd6 <main+0x5a>
  ca:	00 00       	nop
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  de:	00 97       	sbiw	r24, 0x00	; 0
  e0:	a1 f7       	brne	.-24     	; 0xca <main+0x4e>
			// Wait until Push again
			while(GetBit(PINB,PIN0) == 0);
  e2:	b0 9b       	sbis	0x16, 0	; 22
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <main+0x66>
			
			// ON LED2
			SetBit(PORTA,PIN1);
  e6:	8b b3       	in	r24, 0x1b	; 27
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	8b bb       	out	0x1b, r24	; 27
			Delay_ms(900);
  ec:	80 e3       	ldi	r24, 0x30	; 48
  ee:	95 e7       	ldi	r25, 0x75	; 117
  f0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  f8:	06 c0       	rjmp	.+12     	; 0x106 <main+0x8a>
  fa:	00 00       	nop
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 102:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 106:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	a1 f7       	brne	.-24     	; 0xfa <main+0x7e>
			// Wait until Push again
			while(GetBit(PINB,PIN0) == 0);
 112:	b0 9b       	sbis	0x16, 0	; 22
 114:	fe cf       	rjmp	.-4      	; 0x112 <main+0x96>
			
			// ON LED3
			SetBit(PORTA,PIN2);
 116:	8b b3       	in	r24, 0x1b	; 27
 118:	84 60       	ori	r24, 0x04	; 4
 11a:	8b bb       	out	0x1b, r24	; 27
			Delay_ms(900);
 11c:	80 e3       	ldi	r24, 0x30	; 48
 11e:	95 e7       	ldi	r25, 0x75	; 117
 120:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 124:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 128:	06 c0       	rjmp	.+12     	; 0x136 <main+0xba>
 12a:	00 00       	nop
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 132:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 136:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 13a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 13e:	00 97       	sbiw	r24, 0x00	; 0
 140:	a1 f7       	brne	.-24     	; 0x12a <main+0xae>
			// Wait until Push again
			while(GetBit(PINB,PIN0) == 0);
 142:	b0 9b       	sbis	0x16, 0	; 22
 144:	fe cf       	rjmp	.-4      	; 0x142 <main+0xc6>
			
			// ON LED4
			SetBit(PORTA,PIN3);
 146:	8b b3       	in	r24, 0x1b	; 27
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	8b bb       	out	0x1b, r24	; 27
			Delay_ms(900);
 14c:	80 e3       	ldi	r24, 0x30	; 48
 14e:	95 e7       	ldi	r25, 0x75	; 117
 150:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 154:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 158:	06 c0       	rjmp	.+12     	; 0x166 <main+0xea>
 15a:	00 00       	nop
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 162:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 166:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 16a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 16e:	00 97       	sbiw	r24, 0x00	; 0
 170:	a1 f7       	brne	.-24     	; 0x15a <main+0xde>
			// Wait until Push again
			while(GetBit(PINB,PIN0) == 0);
 172:	b0 9b       	sbis	0x16, 0	; 22
 174:	fe cf       	rjmp	.-4      	; 0x172 <main+0xf6>
			
			// ON LED5
			SetBit(PORTA,PIN4);
 176:	8b b3       	in	r24, 0x1b	; 27
 178:	80 61       	ori	r24, 0x10	; 16
 17a:	8b bb       	out	0x1b, r24	; 27
			Delay_ms(900);
 17c:	80 e3       	ldi	r24, 0x30	; 48
 17e:	95 e7       	ldi	r25, 0x75	; 117
 180:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 184:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 188:	06 c0       	rjmp	.+12     	; 0x196 <main+0x11a>
 18a:	00 00       	nop
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 192:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 196:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 19a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 19e:	00 97       	sbiw	r24, 0x00	; 0
 1a0:	a1 f7       	brne	.-24     	; 0x18a <main+0x10e>
			// Wait until Push again
			while(GetBit(PINB,PIN0) == 0);
 1a2:	b0 9b       	sbis	0x16, 0	; 22
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <main+0x126>
			
			// ON LED6
			SetBit(PORTA,PIN5);
 1a6:	8b b3       	in	r24, 0x1b	; 27
 1a8:	80 62       	ori	r24, 0x20	; 32
 1aa:	8b bb       	out	0x1b, r24	; 27
			Delay_ms(900);
 1ac:	80 e3       	ldi	r24, 0x30	; 48
 1ae:	95 e7       	ldi	r25, 0x75	; 117
 1b0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b8:	06 c0       	rjmp	.+12     	; 0x1c6 <main+0x14a>
 1ba:	00 00       	nop
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ca:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	a1 f7       	brne	.-24     	; 0x1ba <main+0x13e>
			// Wait until Push again
			while(GetBit(PINB,PIN0) == 0);
 1d2:	b0 9b       	sbis	0x16, 0	; 22
 1d4:	fe cf       	rjmp	.-4      	; 0x1d2 <main+0x156>
			
			// ON LED7
			SetBit(PORTA,PIN6);
 1d6:	8b b3       	in	r24, 0x1b	; 27
 1d8:	80 64       	ori	r24, 0x40	; 64
 1da:	8b bb       	out	0x1b, r24	; 27
			Delay_ms(900);
 1dc:	80 e3       	ldi	r24, 0x30	; 48
 1de:	95 e7       	ldi	r25, 0x75	; 117
 1e0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e8:	06 c0       	rjmp	.+12     	; 0x1f6 <main+0x17a>
 1ea:	00 00       	nop
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1fa:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1fe:	00 97       	sbiw	r24, 0x00	; 0
 200:	a1 f7       	brne	.-24     	; 0x1ea <main+0x16e>
			// Wait until Push again
			while(GetBit(PINB,PIN0) == 0);
 202:	b0 9b       	sbis	0x16, 0	; 22
 204:	fe cf       	rjmp	.-4      	; 0x202 <main+0x186>
			
			// ON LED8
			SetBit(PORTA,PIN7);
 206:	8b b3       	in	r24, 0x1b	; 27
 208:	80 68       	ori	r24, 0x80	; 128
 20a:	8b bb       	out	0x1b, r24	; 27
			Delay_ms(900);
 20c:	80 e3       	ldi	r24, 0x30	; 48
 20e:	95 e7       	ldi	r25, 0x75	; 117
 210:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 214:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 218:	06 c0       	rjmp	.+12     	; 0x226 <main+0x1aa>
 21a:	00 00       	nop
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 222:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 226:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 22a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 22e:	00 97       	sbiw	r24, 0x00	; 0
 230:	a1 f7       	brne	.-24     	; 0x21a <main+0x19e>
			// Wait until Push again
			while(GetBit(PINB,PIN0) == 0);
 232:	b0 9b       	sbis	0x16, 0	; 22
 234:	fe cf       	rjmp	.-4      	; 0x232 <main+0x1b6>
 236:	27 e0       	ldi	r18, 0x07	; 7
 238:	20 c0       	rjmp	.+64     	; 0x27a <main+0x1fe>
			
			for ( i=7;i>=0;i--)
			{
				Delay_ms(900);
 23a:	80 e3       	ldi	r24, 0x30	; 48
 23c:	95 e7       	ldi	r25, 0x75	; 117
 23e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 242:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 246:	06 c0       	rjmp	.+12     	; 0x254 <main+0x1d8>
 248:	00 00       	nop
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 250:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 254:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 258:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 25c:	00 97       	sbiw	r24, 0x00	; 0
 25e:	a1 f7       	brne	.-24     	; 0x248 <main+0x1cc>
				ClearBit(PORTA,i);
 260:	3b b3       	in	r19, 0x1b	; 27
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 2e       	mov	r0, r18
 268:	02 c0       	rjmp	.+4      	; 0x26e <main+0x1f2>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	0a 94       	dec	r0
 270:	e2 f7       	brpl	.-8      	; 0x26a <main+0x1ee>
 272:	80 95       	com	r24
 274:	83 23       	and	r24, r19
 276:	8b bb       	out	0x1b, r24	; 27
			SetBit(PORTA,PIN7);
			Delay_ms(900);
			// Wait until Push again
			while(GetBit(PINB,PIN0) == 0);
			
			for ( i=7;i>=0;i--)
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	22 23       	and	r18, r18
 27c:	f4 f6       	brge	.-68     	; 0x23a <main+0x1be>
			{
				Delay_ms(900);
				ClearBit(PORTA,i);
			}
			Delay_ms(900);
 27e:	80 e3       	ldi	r24, 0x30	; 48
 280:	95 e7       	ldi	r25, 0x75	; 117
 282:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 286:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 28a:	06 c0       	rjmp	.+12     	; 0x298 <main+0x21c>
 28c:	00 00       	nop
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 294:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 298:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 29c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2a0:	00 97       	sbiw	r24, 0x00	; 0
 2a2:	a1 f7       	brne	.-24     	; 0x28c <main+0x210>
 2a4:	06 cf       	rjmp	.-500    	; 0xb2 <main+0x36>

000002a6 <_exit>:
 2a6:	f8 94       	cli

000002a8 <__stop_program>:
 2a8:	ff cf       	rjmp	.-2      	; 0x2a8 <__stop_program>
